-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digital_compensator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_ref : IN STD_LOGIC_VECTOR (31 downto 0);
    v_meas : IN STD_LOGIC_VECTOR (11 downto 0);
    Kp : IN STD_LOGIC_VECTOR (31 downto 0);
    Ki2 : IN STD_LOGIC_VECTOR (31 downto 0);
    u : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of digital_compensator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "digital_compensator,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.159000,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=19,HLS_SYN_FF=1926,HLS_SYN_LUT=3844}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_447A0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000100011110100000000000000000";
    constant ap_const_lv64_400A666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001010011001100110011001100110011001100110011001100110";
    constant ap_const_lv64_3F30000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111100110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4020000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_68 : BOOLEAN;
    signal sat : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal x_integral : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_161 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_90 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_97 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_130 : BOOLEAN;
    signal grp_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_584 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal y_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_172 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_181 : BOOLEAN;
    signal or_cond_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_201 : BOOLEAN;
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_212 : BOOLEAN;
    signal tmp_20_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal tmp_22_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_integral_new_fu_330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_integral_new_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_232 : BOOLEAN;
    signal tmp_28_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_241 : BOOLEAN;
    signal x_1_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_250 : BOOLEAN;
    signal tmp_32_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_2_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_260 : BOOLEAN;
    signal x_assign_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge1_fu_342_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_275 : BOOLEAN;
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_284 : BOOLEAN;
    signal grp_fu_140_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_316 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_323 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_330 : BOOLEAN;
    signal grp_fu_158_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_to_int_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_196_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_206_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_to_int_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_274_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_cast_fu_338_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_to_int_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_365_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_375_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_to_int_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_414_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_424_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_472_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_476_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_462_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast9_fu_488_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_492_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_fu_506_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_cast_fu_512_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_516_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_528_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_fu_484_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_6_i_i_fu_532_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_7_i_i_fu_536_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_39_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_542_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_34_fu_556_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_35_fu_560_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_124_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_124_ce : STD_LOGIC;
    signal grp_fu_129_ce : STD_LOGIC;
    signal grp_fu_133_ce : STD_LOGIC;
    signal grp_fu_140_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_145_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_151_ce : STD_LOGIC;
    signal grp_fu_158_ce : STD_LOGIC;
    signal or_cond2_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);

    component digital_compensator_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digital_compensator_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digital_compensator_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component digital_compensator_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component digital_compensator_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component digital_compensator_sitodp_32ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    digital_compensator_faddfsub_32ns_32ns_32_5_full_dsp_U0 : component digital_compensator_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_124_p0,
        din1 => grp_fu_124_p1,
        opcode => grp_fu_124_opcode,
        ce => grp_fu_124_ce,
        dout => grp_fu_124_p2);

    digital_compensator_fmul_32ns_32ns_32_4_max_dsp_U1 : component digital_compensator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_167,
        din1 => Ki2,
        ce => grp_fu_129_ce,
        dout => grp_fu_129_p2);

    digital_compensator_fmul_32ns_32ns_32_4_max_dsp_U2 : component digital_compensator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_167,
        din1 => Kp,
        ce => grp_fu_133_ce,
        dout => grp_fu_133_p2);

    digital_compensator_fptrunc_64ns_32_1_U3 : component digital_compensator_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => reg_161,
        dout => y_fu_137_p1);

    digital_compensator_fcmp_32ns_32ns_1_1_U4 : component digital_compensator_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_140_p0,
        din1 => grp_fu_140_p1,
        opcode => grp_fu_140_opcode,
        dout => grp_fu_140_p2);

    digital_compensator_fcmp_32ns_32ns_1_1_U5 : component digital_compensator_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_167,
        din1 => ap_const_lv32_447A0000,
        opcode => tmp_21_fu_145_opcode,
        dout => tmp_21_fu_145_p2);

    digital_compensator_dmul_64ns_64ns_64_6_max_dsp_U6 : component digital_compensator_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_151_p0,
        din1 => grp_fu_151_p1,
        ce => grp_fu_151_ce,
        dout => grp_fu_151_p2);

    digital_compensator_sitodp_32ns_64_6_U7 : component digital_compensator_sitodp_32ns_64_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_158_p0,
        ce => grp_fu_158_ce,
        dout => grp_fu_158_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                or_cond_reg_614 <= or_cond_fu_233_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then
                reg_161 <= grp_fu_151_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40) or (ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47))) then
                reg_167 <= grp_fu_124_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then
                sat <= storemerge1_fu_342_p3;
                x_integral <= x_integral_new_fu_330_p3;
                x_integral_new_reg_659 <= x_integral_new_fu_330_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                tmp_11_reg_599 <= grp_fu_140_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then
                tmp_12_reg_636 <= grp_fu_133_p2;
                tmp_8_reg_631 <= grp_fu_129_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (or_cond_fu_233_p2 = ap_const_lv1_0))) then
                tmp_15_reg_623 <= tmp_15_fu_245_p2;
                tmp_6_reg_618 <= tmp_6_fu_239_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then
                tmp_20_reg_646 <= tmp_20_fu_296_p2;
                tmp_22_reg_654 <= tmp_22_fu_302_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then
                tmp_28_reg_664 <= tmp_28_fu_397_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then
                tmp_32_reg_675 <= grp_fu_140_p2;
                x_1_reg_669 <= x_1_fu_403_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_s_reg_584 <= grp_fu_158_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then
                x_assign_reg_113 <= x_2_fu_451_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                y_reg_589 <= y_fu_137_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, or_cond_reg_614, or_cond2_fu_251_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                if ((not((or_cond_reg_614 = ap_const_lv1_0)) or not((ap_const_lv1_0 = or_cond2_fu_251_p2)))) then
                    ap_NS_fsm <= ap_ST_st52_fsm_51;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                end if;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st52_fsm_51)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st52_fsm_51)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    -- ap_sig_bdd_130 assign process. --
    ap_sig_bdd_130_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_130 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_163 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_172 assign process. --
    ap_sig_bdd_172_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_172 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_181 assign process. --
    ap_sig_bdd_181_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_181 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_201 assign process. --
    ap_sig_bdd_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_201 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_212 assign process. --
    ap_sig_bdd_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_212 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    -- ap_sig_bdd_232 assign process. --
    ap_sig_bdd_232_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_232 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_241 assign process. --
    ap_sig_bdd_241_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_241 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_250 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_260 assign process. --
    ap_sig_bdd_260_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_260 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_275 assign process. --
    ap_sig_bdd_275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_275 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_284 assign process. --
    ap_sig_bdd_284_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_284 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_316 assign process. --
    ap_sig_bdd_316_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_316 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_323 assign process. --
    ap_sig_bdd_323_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_323 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_330 assign process. --
    ap_sig_bdd_330_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_330 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_68 assign process. --
    ap_sig_bdd_68_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_68 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_90 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_97 assign process. --
    ap_sig_bdd_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_97 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_90)
    begin
        if (ap_sig_bdd_90) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_323)
    begin
        if (ap_sig_bdd_323) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_97)
    begin
        if (ap_sig_bdd_97) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_330)
    begin
        if (ap_sig_bdd_330) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_68)
    begin
        if (ap_sig_bdd_68) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_163)
    begin
        if (ap_sig_bdd_163) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_172)
    begin
        if (ap_sig_bdd_172) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_181)
    begin
        if (ap_sig_bdd_181) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_35 assign process. --
    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_bdd_201)
    begin
        if (ap_sig_bdd_201) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_36 assign process. --
    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_bdd_212)
    begin
        if (ap_sig_bdd_212) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st41_fsm_40 assign process. --
    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_41 assign process. --
    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_42 assign process. --
    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_bdd_232)
    begin
        if (ap_sig_bdd_232) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_284)
    begin
        if (ap_sig_bdd_284) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_47 assign process. --
    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_bdd_130)
    begin
        if (ap_sig_bdd_130) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_241)
    begin
        if (ap_sig_bdd_241) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_250)
    begin
        if (ap_sig_bdd_250) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_50 assign process. --
    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_bdd_260)
    begin
        if (ap_sig_bdd_260) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_51 assign process. --
    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_bdd_275)
    begin
        if (ap_sig_bdd_275) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_316)
    begin
        if (ap_sig_bdd_316) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    e_to_int_fu_192_p1 <= reg_167;
    grp_fu_124_ce <= ap_const_logic_1;

    -- grp_fu_124_opcode assign process. --
    grp_fu_124_opcode_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st44_fsm_43)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            grp_fu_124_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43))) then 
            grp_fu_124_opcode <= ap_const_lv2_0;
        else 
            grp_fu_124_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_124_p0 assign process. --
    grp_fu_124_p0_assign_proc : process(v_ref, x_integral, ap_sig_cseq_ST_st26_fsm_25, tmp_12_reg_636, ap_sig_cseq_ST_st37_fsm_36, ap_sig_cseq_ST_st44_fsm_43)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_124_p0 <= tmp_12_reg_636;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_124_p0 <= x_integral;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            grp_fu_124_p0 <= v_ref;
        else 
            grp_fu_124_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_124_p1 assign process. --
    grp_fu_124_p1_assign_proc : process(y_reg_589, ap_sig_cseq_ST_st26_fsm_25, tmp_8_reg_631, ap_sig_cseq_ST_st37_fsm_36, x_integral_new_reg_659, ap_sig_cseq_ST_st44_fsm_43)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then 
            grp_fu_124_p1 <= x_integral_new_reg_659;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_124_p1 <= tmp_8_reg_631;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            grp_fu_124_p1 <= y_reg_589;
        else 
            grp_fu_124_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_129_ce <= ap_const_logic_1;
    grp_fu_133_ce <= ap_const_logic_1;

    -- grp_fu_140_opcode assign process. --
    grp_fu_140_opcode_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st32_fsm_31, or_cond_fu_233_p2, ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (or_cond_fu_233_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            grp_fu_140_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49))) then 
            grp_fu_140_opcode <= ap_const_lv5_4;
        else 
            grp_fu_140_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_140_p0 assign process. --
    grp_fu_140_p0_assign_proc : process(reg_167, ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st49_fsm_48, x_1_fu_403_p3, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_140_p0 <= x_1_fu_403_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            grp_fu_140_p0 <= reg_167;
        else 
            grp_fu_140_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_140_p1 assign process. --
    grp_fu_140_p1_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st42_fsm_41, ap_sig_cseq_ST_st49_fsm_48, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_140_p1 <= ap_const_lv32_447A0000;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            grp_fu_140_p1 <= ap_const_lv32_0;
        else 
            grp_fu_140_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_151_ce <= ap_const_logic_1;

    -- grp_fu_151_p0 assign process. --
    grp_fu_151_p0_assign_proc : process(reg_161, tmp_s_reg_584, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            grp_fu_151_p0 <= reg_161;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_151_p0 <= tmp_s_reg_584;
        else 
            grp_fu_151_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_151_p1 assign process. --
    grp_fu_151_p1_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            grp_fu_151_p1 <= ap_const_lv64_4020000000000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_151_p1 <= ap_const_lv64_3F30000000000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_151_p1 <= ap_const_lv64_400A666666666666;
        else 
            grp_fu_151_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_158_ce <= ap_const_logic_1;
    grp_fu_158_p0 <= std_logic_vector(resize(unsigned(v_meas),32));
    isNeg_fu_498_p3 <= sh_assign_fu_492_p2(8 downto 8);
    loc_V_1_fu_472_p1 <= p_Val2_s_fu_458_p1(23 - 1 downto 0);
    loc_V_fu_462_p4 <= p_Val2_s_fu_458_p1(30 downto 23);
    notlhs2_fu_278_p2 <= "0" when (tmp_16_fu_264_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_379_p2 <= "0" when (tmp_24_fu_365_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_428_p2 <= "0" when (tmp_29_fu_414_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_210_p2 <= "0" when (tmp_5_fu_196_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_284_p2 <= "1" when (tmp_17_fu_274_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_385_p2 <= "1" when (tmp_25_fu_375_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_434_p2 <= "1" when (tmp_30_fu_424_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_216_p2 <= "1" when (tmp_7_fu_206_p1 = ap_const_lv23_0) else "0";
    or_cond2_fu_251_p2 <= (tmp_6_reg_618 and tmp_15_reg_623);
    or_cond_fu_233_p2 <= (tmp_4_fu_184_p3 and tmp_13_fu_228_p2);
    p_Result_s_fu_476_p3 <= (ap_const_lv1_1 & loc_V_1_fu_472_p1);
    p_Val2_s_fu_458_p1 <= x_assign_reg_113;
    sel_tmp2_fu_313_p2 <= (tmp_22_reg_654 and sel_tmp_fu_308_p2);
    sel_tmp3_fu_318_p3 <= 
        ap_const_lv32_0 when (tmp_20_reg_646(0) = '1') else 
        ap_const_lv32_447A0000;
    sel_tmp7_cast_fu_338_p1 <= std_logic_vector(resize(unsigned(sel_tmp2_fu_313_p2),2));
    sel_tmp_fu_308_p2 <= (tmp_20_reg_646 xor ap_const_lv1_1);
        sh_assign_1_cast_cast_fu_528_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_516_p3),24));

        sh_assign_1_cast_fu_524_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_516_p3),32));

    sh_assign_1_fu_516_p3 <= 
        tmp_4_i_i_cast_fu_512_p1 when (isNeg_fu_498_p3(0) = '1') else 
        sh_assign_fu_492_p2;
    sh_assign_fu_492_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast9_fu_488_p1));
    storemerge1_fu_342_p3 <= 
        ap_const_lv2_3 when (tmp_20_reg_646(0) = '1') else 
        sel_tmp7_cast_fu_338_p1;
    tmp_10_fu_222_p2 <= (notrhs_fu_216_p2 or notlhs_fu_210_p2);
    tmp_13_fu_228_p2 <= (tmp_10_fu_222_p2 and tmp_11_reg_599);
    tmp_15_fu_245_p2 <= (tmp_10_fu_222_p2 and grp_fu_140_p2);
    tmp_16_fu_264_p4 <= tmp_9_to_int_fu_260_p1(30 downto 23);
    tmp_17_fu_274_p1 <= tmp_9_to_int_fu_260_p1(23 - 1 downto 0);
    tmp_18_fu_290_p2 <= (notrhs2_fu_284_p2 or notlhs2_fu_278_p2);
    tmp_20_fu_296_p2 <= (tmp_18_fu_290_p2 and grp_fu_140_p2);
    tmp_21_fu_145_opcode <= ap_const_lv5_2;
    tmp_22_fu_302_p2 <= (tmp_18_fu_290_p2 and tmp_21_fu_145_p2);
    tmp_23_fu_325_p2 <= (tmp_20_reg_646 or sel_tmp2_fu_313_p2);
    tmp_24_fu_365_p4 <= x_to_int_fu_361_p1(30 downto 23);
    tmp_25_fu_375_p1 <= x_to_int_fu_361_p1(23 - 1 downto 0);
    tmp_26_fu_391_p2 <= (notrhs4_fu_385_p2 or notlhs4_fu_379_p2);
    tmp_28_fu_397_p2 <= (tmp_26_fu_391_p2 and grp_fu_140_p2);
    tmp_29_fu_414_p4 <= x_1_to_int_fu_411_p1(30 downto 23);
    tmp_2_i_i_fu_484_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_476_p3),62));
    tmp_30_fu_424_p1 <= x_1_to_int_fu_411_p1(23 - 1 downto 0);
    tmp_31_fu_440_p2 <= (notrhs5_fu_434_p2 or notlhs5_fu_428_p2);
    tmp_33_fu_446_p2 <= (tmp_31_fu_440_p2 and tmp_32_reg_675);
    tmp_34_fu_556_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_548_p3),10));
    tmp_35_fu_560_p4 <= tmp_9_i_i_fu_542_p2(32 downto 23);
    tmp_39_fu_548_p3 <= tmp_7_i_i_fu_536_p2(23 downto 23);
    tmp_4_fu_184_p3 <= sat(1 downto 1);
        tmp_4_i_i_cast_fu_512_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_fu_506_p2),9));

    tmp_4_i_i_fu_506_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_462_p4));
    tmp_5_fu_196_p4 <= e_to_int_fu_192_p1(30 downto 23);
    tmp_6_fu_239_p2 <= "1" when (sat = ap_const_lv2_1) else "0";
    tmp_6_i_i_fu_532_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_524_p1),62));
    tmp_7_fu_206_p1 <= e_to_int_fu_192_p1(23 - 1 downto 0);
    tmp_7_i_i_fu_536_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_476_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_528_p1(24-1 downto 0)))));
    tmp_9_i_i_fu_542_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_fu_484_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_532_p1(31-1 downto 0)))));
    tmp_9_to_int_fu_260_p1 <= reg_167;
    tmp_i_i_i_cast9_fu_488_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_462_p4),9));
    u <= 
        tmp_34_fu_556_p1 when (isNeg_fu_498_p3(0) = '1') else 
        tmp_35_fu_560_p4;
    x_1_fu_403_p3 <= 
        reg_167 when (tmp_28_reg_664(0) = '1') else 
        ap_const_lv32_0;
    x_1_to_int_fu_411_p1 <= x_1_reg_669;
    x_2_fu_451_p3 <= 
        x_1_reg_669 when (tmp_33_fu_446_p2(0) = '1') else 
        ap_const_lv32_447A0000;
    x_integral_new_fu_330_p3 <= 
        sel_tmp3_fu_318_p3 when (tmp_23_fu_325_p2(0) = '1') else 
        reg_167;
    x_to_int_fu_361_p1 <= reg_167;
end behav;
