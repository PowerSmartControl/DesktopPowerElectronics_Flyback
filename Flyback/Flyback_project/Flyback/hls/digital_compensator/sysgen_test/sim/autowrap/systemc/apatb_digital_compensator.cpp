// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;

// apint = uint12
#define uint12 short

// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "v_ref"
#define AUTOTB_TVIN_v_ref  "../tv/cdatafile/c.digital_compensator.autotvin_v_ref.dat"
// wrapc file define: "v_meas"
#define AUTOTB_TVIN_v_meas  "../tv/cdatafile/c.digital_compensator.autotvin_v_meas.dat"
// wrapc file define: "Kp"
#define AUTOTB_TVIN_Kp  "../tv/cdatafile/c.digital_compensator.autotvin_Kp.dat"
// wrapc file define: "Ki2"
#define AUTOTB_TVIN_Ki2  "../tv/cdatafile/c.digital_compensator.autotvin_Ki2.dat"
// wrapc file define: "u"
#define AUTOTB_TVOUT_u  "../tv/cdatafile/c.digital_compensator.autotvout_u.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "u"
#define AUTOTB_TVOUT_PC_u  "../tv/rtldatafile/rtl.digital_compensator.autotvout_u.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			v_ref_depth = 0;
			v_meas_depth = 0;
			Kp_depth = 0;
			Ki2_depth = 0;
			u_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{v_ref " << v_ref_depth << "}\n";
			total_list << "{v_meas " << v_meas_depth << "}\n";
			total_list << "{Kp " << Kp_depth << "}\n";
			total_list << "{Ki2 " << Ki2_depth << "}\n";
			total_list << "{u " << u_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int v_ref_depth;
		int v_meas_depth;
		int Kp_depth;
		int Ki2_depth;
		int u_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void digital_compensator (
float v_ref,
uint12 v_meas,
float Kp,
float Ki2,
float* u);

#define digital_compensator AESL_ORIG_DUT_digital_compensator
extern "C" void digital_compensator (
float v_ref,
uint12 v_meas,
float Kp,
float Ki2,
float* u);
#undef digital_compensator

void digital_compensator (
float v_ref,
uint12 v_meas,
float Kp,
float Ki2,
float* u)
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "u"
		aesl_fh.read(AUTOTB_TVOUT_PC_u, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_u, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_u, AESL_token); // data

			sc_bv<32> *u_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'u', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'u', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					u_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_u, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_u))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: u
				{
					// bitslice(31, 0)
					// {
						// celement: u(31, 0)
						// {
							sc_lv<32>* u_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: u(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(u[0]) != NULL) // check the null address if the c port is array or others
								{
									u_lv0_0_0_1[hls_map_index++].range(31, 0) = sc_bv<32>(u_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: u(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : u[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : u[0]
								// output_left_conversion : *(int*)&u[i_0]
								// output_type_conversion : (u_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(u[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&u[i_0] = (u_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] u_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "v_ref"
		char* tvin_v_ref = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_v_ref);

		// "v_meas"
		char* tvin_v_meas = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_v_meas);

		// "Kp"
		char* tvin_Kp = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_Kp);

		// "Ki2"
		char* tvin_Ki2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_Ki2);

		// "u"
		char* tvout_u = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_u);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_v_ref, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_v_ref, tvin_v_ref);

		sc_bv<32> v_ref_tvin_wrapc_buffer;

		// RTL Name: v_ref
		{
			// bitslice(31, 0)
			{
				// celement: v_ref(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : v_ref
						// sub_1st_elem          : 
						// ori_name_1st_elem     : v_ref
						// regulate_c_name       : v_ref
						// input_type_conversion : *(int*)&v_ref
						if (&(v_ref) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> v_ref_tmp_mem;
							v_ref_tmp_mem = *(int*)&v_ref;
							v_ref_tvin_wrapc_buffer.range(31, 0) = v_ref_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_v_ref, "%s\n", (v_ref_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_v_ref, tvin_v_ref);
		}

		tcl_file.set_num(1, &tcl_file.v_ref_depth);
		sprintf(tvin_v_ref, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_v_ref, tvin_v_ref);

		// [[transaction]]
		sprintf(tvin_v_meas, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_v_meas, tvin_v_meas);

		sc_bv<12> v_meas_tvin_wrapc_buffer;

		// RTL Name: v_meas
		{
			// bitslice(11, 0)
			{
				// celement: v_meas(11, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : v_meas
						// sub_1st_elem          : 
						// ori_name_1st_elem     : v_meas
						// regulate_c_name       : v_meas
						// input_type_conversion : v_meas
						if (&(v_meas) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<12> v_meas_tmp_mem;
							v_meas_tmp_mem = v_meas;
							v_meas_tvin_wrapc_buffer.range(11, 0) = v_meas_tmp_mem.range(11, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_v_meas, "%s\n", (v_meas_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_v_meas, tvin_v_meas);
		}

		tcl_file.set_num(1, &tcl_file.v_meas_depth);
		sprintf(tvin_v_meas, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_v_meas, tvin_v_meas);

		// [[transaction]]
		sprintf(tvin_Kp, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_Kp, tvin_Kp);

		sc_bv<32> Kp_tvin_wrapc_buffer;

		// RTL Name: Kp
		{
			// bitslice(31, 0)
			{
				// celement: Kp(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : Kp
						// sub_1st_elem          : 
						// ori_name_1st_elem     : Kp
						// regulate_c_name       : Kp
						// input_type_conversion : *(int*)&Kp
						if (&(Kp) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> Kp_tmp_mem;
							Kp_tmp_mem = *(int*)&Kp;
							Kp_tvin_wrapc_buffer.range(31, 0) = Kp_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_Kp, "%s\n", (Kp_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_Kp, tvin_Kp);
		}

		tcl_file.set_num(1, &tcl_file.Kp_depth);
		sprintf(tvin_Kp, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_Kp, tvin_Kp);

		// [[transaction]]
		sprintf(tvin_Ki2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_Ki2, tvin_Ki2);

		sc_bv<32> Ki2_tvin_wrapc_buffer;

		// RTL Name: Ki2
		{
			// bitslice(31, 0)
			{
				// celement: Ki2(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : Ki2
						// sub_1st_elem          : 
						// ori_name_1st_elem     : Ki2
						// regulate_c_name       : Ki2
						// input_type_conversion : *(int*)&Ki2
						if (&(Ki2) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> Ki2_tmp_mem;
							Ki2_tmp_mem = *(int*)&Ki2;
							Ki2_tvin_wrapc_buffer.range(31, 0) = Ki2_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_Ki2, "%s\n", (Ki2_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_Ki2, tvin_Ki2);
		}

		tcl_file.set_num(1, &tcl_file.Ki2_depth);
		sprintf(tvin_Ki2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_Ki2, tvin_Ki2);

// [call_c_dut] ---------->

		AESL_ORIG_DUT_digital_compensator(v_ref, v_meas, Kp, Ki2, u);


		// [[transaction]]
		sprintf(tvout_u, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_u, tvout_u);

		sc_bv<32>* u_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: u
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: u(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : u[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : u[0]
						// regulate_c_name       : u
						// input_type_conversion : *(int*)&u[i_0]
						if (&(u[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> u_tmp_mem;
							u_tmp_mem = *(int*)&u[i_0];
							u_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = u_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_u, "%s\n", (u_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_u, tvout_u);
		}

		tcl_file.set_num(1, &tcl_file.u_depth);
		sprintf(tvout_u, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_u, tvout_u);

		// release memory allocation
		delete [] u_tvout_wrapc_buffer;

		// release memory allocation: "v_ref"
		delete [] tvin_v_ref;
		// release memory allocation: "v_meas"
		delete [] tvin_v_meas;
		// release memory allocation: "Kp"
		delete [] tvin_Kp;
		// release memory allocation: "Ki2"
		delete [] tvin_Ki2;
		// release memory allocation: "u"
		delete [] tvout_u;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}


// apint = uint12
#undef uint12
