// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module Dig_compensator_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 7,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    // user signals
    output wire [31:0]                   params_vRef,
    input  wire [1:0]                    params_coef_address0,
    input  wire                          params_coef_ce0,
    output wire [31:0]                   params_coef_q0,
    output wire [31:0]                   params_y_max,
    output wire [31:0]                   params_adcMask,
    input  wire [31:0]                   yVmeasDbg,
    input  wire                          yVmeasDbg_ap_vld,
    input  wire [31:0]                   yDbg,
    input  wire                          yDbg_ap_vld,
    input  wire [31:0]                   eDbg,
    input  wire                          eDbg_ap_vld,
    input  wire [9:0]                    uDbg,
    input  wire                          uDbg_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : Data signal of params_vRef
//        bit 31~0 - params_vRef[31:0] (Read/Write)
// 0x14 : reserved
// 0x30 : Data signal of params_y_max
//        bit 31~0 - params_y_max[31:0] (Read/Write)
// 0x34 : reserved
// 0x38 : Data signal of params_adcMask
//        bit 31~0 - params_adcMask[31:0] (Read/Write)
// 0x3c : reserved
// 0x40 : Data signal of yVmeasDbg
//        bit 31~0 - yVmeasDbg[31:0] (Read)
// 0x44 : Control signal of yVmeasDbg
//        bit 0  - yVmeasDbg_ap_vld (Read/COR)
//        others - reserved
// 0x48 : Data signal of yDbg
//        bit 31~0 - yDbg[31:0] (Read)
// 0x4c : Control signal of yDbg
//        bit 0  - yDbg_ap_vld (Read/COR)
//        others - reserved
// 0x50 : Data signal of eDbg
//        bit 31~0 - eDbg[31:0] (Read)
// 0x54 : Control signal of eDbg
//        bit 0  - eDbg_ap_vld (Read/COR)
//        others - reserved
// 0x58 : Data signal of uDbg
//        bit 9~0 - uDbg[9:0] (Read)
//        others  - reserved
// 0x5c : Control signal of uDbg
//        bit 0  - uDbg_ap_vld (Read/COR)
//        others - reserved
// 0x20 ~
// 0x2f : Memory 'params_coef' (3 * 32b)
//        Word n : bit [31:0] - params_coef[n]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_PARAMS_VREF_DATA_0    = 7'h10,
    ADDR_PARAMS_VREF_CTRL      = 7'h14,
    ADDR_PARAMS_Y_MAX_DATA_0   = 7'h30,
    ADDR_PARAMS_Y_MAX_CTRL     = 7'h34,
    ADDR_PARAMS_ADCMASK_DATA_0 = 7'h38,
    ADDR_PARAMS_ADCMASK_CTRL   = 7'h3c,
    ADDR_YVMEASDBG_DATA_0      = 7'h40,
    ADDR_YVMEASDBG_CTRL        = 7'h44,
    ADDR_YDBG_DATA_0           = 7'h48,
    ADDR_YDBG_CTRL             = 7'h4c,
    ADDR_EDBG_DATA_0           = 7'h50,
    ADDR_EDBG_CTRL             = 7'h54,
    ADDR_UDBG_DATA_0           = 7'h58,
    ADDR_UDBG_CTRL             = 7'h5c,
    ADDR_PARAMS_COEF_BASE      = 7'h20,
    ADDR_PARAMS_COEF_HIGH      = 7'h2f,
    WRIDLE                     = 2'd0,
    WRDATA                     = 2'd1,
    WRRESP                     = 2'd2,
    RDIDLE                     = 2'd0,
    RDDATA                     = 2'd1,
    ADDR_BITS         = 7;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg  [31:0]                   int_params_vRef;
    reg  [31:0]                   int_params_y_max;
    reg  [31:0]                   int_params_adcMask;
    reg  [31:0]                   int_yVmeasDbg;
    reg                           int_yVmeasDbg_ap_vld;
    reg  [31:0]                   int_yDbg;
    reg                           int_yDbg_ap_vld;
    reg  [31:0]                   int_eDbg;
    reg                           int_eDbg_ap_vld;
    reg  [9:0]                    int_uDbg;
    reg                           int_uDbg_ap_vld;
    // memory signals
    wire [1:0]                    int_params_coef_address0;
    wire                          int_params_coef_ce0;
    wire                          int_params_coef_we0;
    wire [3:0]                    int_params_coef_be0;
    wire [31:0]                   int_params_coef_d0;
    wire [31:0]                   int_params_coef_q0;
    wire [1:0]                    int_params_coef_address1;
    wire                          int_params_coef_ce1;
    wire                          int_params_coef_we1;
    wire [3:0]                    int_params_coef_be1;
    wire [31:0]                   int_params_coef_d1;
    wire [31:0]                   int_params_coef_q1;
    reg                           int_params_coef_read;
    reg                           int_params_coef_write;

//------------------------Instantiation------------------
// int_params_coef
Dig_compensator_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 3 )
) int_params_coef (
    .clk0     ( ACLK ),
    .address0 ( int_params_coef_address0 ),
    .ce0      ( int_params_coef_ce0 ),
    .we0      ( int_params_coef_we0 ),
    .be0      ( int_params_coef_be0 ),
    .d0       ( int_params_coef_d0 ),
    .q0       ( int_params_coef_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_params_coef_address1 ),
    .ce1      ( int_params_coef_ce1 ),
    .we1      ( int_params_coef_we1 ),
    .be1      ( int_params_coef_be1 ),
    .d1       ( int_params_coef_d1 ),
    .q1       ( int_params_coef_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_params_coef_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_PARAMS_VREF_DATA_0: begin
                    rdata <= int_params_vRef[31:0];
                end
                ADDR_PARAMS_Y_MAX_DATA_0: begin
                    rdata <= int_params_y_max[31:0];
                end
                ADDR_PARAMS_ADCMASK_DATA_0: begin
                    rdata <= int_params_adcMask[31:0];
                end
                ADDR_YVMEASDBG_DATA_0: begin
                    rdata <= int_yVmeasDbg[31:0];
                end
                ADDR_YVMEASDBG_CTRL: begin
                    rdata[0] <= int_yVmeasDbg_ap_vld;
                end
                ADDR_YDBG_DATA_0: begin
                    rdata <= int_yDbg[31:0];
                end
                ADDR_YDBG_CTRL: begin
                    rdata[0] <= int_yDbg_ap_vld;
                end
                ADDR_EDBG_DATA_0: begin
                    rdata <= int_eDbg[31:0];
                end
                ADDR_EDBG_CTRL: begin
                    rdata[0] <= int_eDbg_ap_vld;
                end
                ADDR_UDBG_DATA_0: begin
                    rdata <= int_uDbg[9:0];
                end
                ADDR_UDBG_CTRL: begin
                    rdata[0] <= int_uDbg_ap_vld;
                end
            endcase
        end
        else if (int_params_coef_read) begin
            rdata <= int_params_coef_q1;
        end
    end
end


//------------------------Register logic-----------------
assign params_vRef    = int_params_vRef;
assign params_y_max   = int_params_y_max;
assign params_adcMask = int_params_adcMask;
// int_params_vRef[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_params_vRef[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PARAMS_VREF_DATA_0)
            int_params_vRef[31:0] <= (WDATA[31:0] & wmask) | (int_params_vRef[31:0] & ~wmask);
    end
end

// int_params_y_max[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_params_y_max[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PARAMS_Y_MAX_DATA_0)
            int_params_y_max[31:0] <= (WDATA[31:0] & wmask) | (int_params_y_max[31:0] & ~wmask);
    end
end

// int_params_adcMask[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_params_adcMask[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PARAMS_ADCMASK_DATA_0)
            int_params_adcMask[31:0] <= (WDATA[31:0] & wmask) | (int_params_adcMask[31:0] & ~wmask);
    end
end

// int_yVmeasDbg
always @(posedge ACLK) begin
    if (ARESET)
        int_yVmeasDbg <= 0;
    else if (ACLK_EN) begin
        if (yVmeasDbg_ap_vld)
            int_yVmeasDbg <= yVmeasDbg;
    end
end

// int_yVmeasDbg_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_yVmeasDbg_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (yVmeasDbg_ap_vld)
            int_yVmeasDbg_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_YVMEASDBG_CTRL)
            int_yVmeasDbg_ap_vld <= 1'b0; // clear on read
    end
end

// int_yDbg
always @(posedge ACLK) begin
    if (ARESET)
        int_yDbg <= 0;
    else if (ACLK_EN) begin
        if (yDbg_ap_vld)
            int_yDbg <= yDbg;
    end
end

// int_yDbg_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_yDbg_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (yDbg_ap_vld)
            int_yDbg_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_YDBG_CTRL)
            int_yDbg_ap_vld <= 1'b0; // clear on read
    end
end

// int_eDbg
always @(posedge ACLK) begin
    if (ARESET)
        int_eDbg <= 0;
    else if (ACLK_EN) begin
        if (eDbg_ap_vld)
            int_eDbg <= eDbg;
    end
end

// int_eDbg_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_eDbg_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (eDbg_ap_vld)
            int_eDbg_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_EDBG_CTRL)
            int_eDbg_ap_vld <= 1'b0; // clear on read
    end
end

// int_uDbg
always @(posedge ACLK) begin
    if (ARESET)
        int_uDbg <= 0;
    else if (ACLK_EN) begin
        if (uDbg_ap_vld)
            int_uDbg <= uDbg;
    end
end

// int_uDbg_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_uDbg_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (uDbg_ap_vld)
            int_uDbg_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_UDBG_CTRL)
            int_uDbg_ap_vld <= 1'b0; // clear on read
    end
end


//------------------------Memory logic-------------------
// params_coef
assign int_params_coef_address0 = params_coef_address0;
assign int_params_coef_ce0      = params_coef_ce0;
assign int_params_coef_we0      = 1'b0;
assign int_params_coef_be0      = 1'b0;
assign int_params_coef_d0       = 1'b0;
assign params_coef_q0           = int_params_coef_q0;
assign int_params_coef_address1 = ar_hs? raddr[3:2] : waddr[3:2];
assign int_params_coef_ce1      = ar_hs | (int_params_coef_write & WVALID);
assign int_params_coef_we1      = int_params_coef_write & WVALID;
assign int_params_coef_be1      = WSTRB;
assign int_params_coef_d1       = WDATA;
// int_params_coef_read
always @(posedge ACLK) begin
    if (ARESET)
        int_params_coef_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_PARAMS_COEF_BASE && raddr <= ADDR_PARAMS_COEF_HIGH)
            int_params_coef_read <= 1'b1;
        else
            int_params_coef_read <= 1'b0;
    end
end

// int_params_coef_write
always @(posedge ACLK) begin
    if (ARESET)
        int_params_coef_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_PARAMS_COEF_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_PARAMS_COEF_HIGH)
            int_params_coef_write <= 1'b1;
        else if (WVALID)
            int_params_coef_write <= 1'b0;
    end
end


endmodule


`timescale 1ns/1ps

module Dig_compensator_AXILiteS_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

