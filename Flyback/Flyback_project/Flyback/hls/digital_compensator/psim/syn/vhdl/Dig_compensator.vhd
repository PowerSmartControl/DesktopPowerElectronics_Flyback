-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Dig_compensator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    params_vRef : IN STD_LOGIC_VECTOR (31 downto 0);
    params_a_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    params_a_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    params_a_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    params_a_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    params_b_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    params_b_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    params_b_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    params_b_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    v_meas : IN STD_LOGIC_VECTOR (11 downto 0);
    u : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of Dig_compensator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Dig_compensator,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.613500,HLS_SYN_LAT=103,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=2149,HLS_SYN_LUT=3732}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_44480000 : STD_LOGIC_VECTOR (31 downto 0) := "01000100010010000000000000000000";
    constant ap_const_lv64_400A666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001010011001100110011001100110011001100110011001100110";
    constant ap_const_lv64_3F30000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111100110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_68 : BOOLEAN;
    signal y_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal e_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal e_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal e_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_99 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_bdd_140 : BOOLEAN;
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_747 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_155 : BOOLEAN;
    signal v_measReal_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_measReal_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_164 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_173 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal e_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_306_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_806 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_204 : BOOLEAN;
    signal tmp_fu_316_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_331_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_3_load_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_load_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_load_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_a_load_phi_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_a_load_phi_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_bdd_229 : BOOLEAN;
    signal exitcond_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_load_phi_fu_398_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_load_phi_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_405_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_851 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st43_fsm_42 : STD_LOGIC;
    signal ap_sig_bdd_244 : BOOLEAN;
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_bdd_253 : BOOLEAN;
    signal tmp_9_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_262 : BOOLEAN;
    signal tmp_19_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_887 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_271 : BOOLEAN;
    signal x_assign_fu_509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_280 : BOOLEAN;
    signal i_5_fu_642_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_bdd_289 : BOOLEAN;
    signal tmp_13_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_183 : STD_LOGIC_VECTOR (2 downto 0);
    signal num_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_206 : STD_LOGIC_VECTOR (2 downto 0);
    signal den_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_phi_fu_233_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_229 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_load_1_phi_fu_707_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_load_1_phi_fu_668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_load_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_load_1_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_627_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_preg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_356 : BOOLEAN;
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_bdd_364 : BOOLEAN;
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_bdd_374 : BOOLEAN;
    signal grp_fu_255_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_389 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_396 : BOOLEAN;
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_312_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_27_fu_363_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_373_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_392_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_to_int_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_423_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_433_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_to_int_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_471_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_481_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_529_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_533_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_519_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast_fu_545_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_549_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_555_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_cast_fu_569_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_573_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_585_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_fu_541_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_6_i_i_fu_589_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_7_i_i_fu_593_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_fu_605_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_599_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_21_fu_613_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_617_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sel_tmp9_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_fu_699_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_248_ce : STD_LOGIC;
    signal grp_fu_255_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_261_ce : STD_LOGIC;
    signal grp_fu_267_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);

    component Dig_compensator_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dig_compensator_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dig_compensator_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dig_compensator_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Dig_compensator_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Dig_compensator_sitodp_32ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Dig_compensator_mux_4to1_sel2_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Dig_compensator_faddfsub_32ns_32ns_32_5_full_dsp_U0 : component Dig_compensator_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_240_p0,
        din1 => grp_fu_240_p1,
        opcode => grp_fu_240_opcode,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p2);

    Dig_compensator_fmul_32ns_32ns_32_4_max_dsp_U1 : component Dig_compensator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_248_p0,
        din1 => grp_fu_248_p1,
        ce => grp_fu_248_ce,
        dout => grp_fu_248_p2);

    Dig_compensator_fptrunc_64ns_32_1_U2 : component Dig_compensator_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => reg_278,
        dout => v_measReal_fu_252_p1);

    Dig_compensator_fcmp_32ns_32ns_1_1_U3 : component Dig_compensator_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_255_p0,
        din1 => grp_fu_255_p1,
        opcode => grp_fu_255_opcode,
        dout => grp_fu_255_p2);

    Dig_compensator_dmul_64ns_64ns_64_6_max_dsp_U4 : component Dig_compensator_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p0,
        din1 => grp_fu_261_p1,
        ce => grp_fu_261_ce,
        dout => grp_fu_261_p2);

    Dig_compensator_sitodp_32ns_64_6_U5 : component Dig_compensator_sitodp_32ns_64_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_267_p0,
        ce => grp_fu_267_ce,
        dout => grp_fu_267_p1);

    Dig_compensator_mux_4to1_sel2_32_1_U6 : component Dig_compensator_mux_4to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => params_b_0,
        din2 => params_b_1,
        din3 => params_b_2,
        din4 => params_b_3,
        din5 => tmp_8_fu_312_p1,
        dout => tmp_fu_316_p6);

    Dig_compensator_mux_4to1_sel2_32_1_U7 : component Dig_compensator_mux_4to1_sel2_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => e_reg_797,
        din2 => e_1,
        din3 => e_2,
        din4 => e_3,
        din5 => tmp_8_fu_312_p1,
        dout => tmp_4_fu_331_p6);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- u_preg assign process. --
    u_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                u_preg <= ap_const_lv10_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
                    u_preg <= tmp_23_fu_627_p3;
                end if; 
            end if;
        end if;
    end process;


    -- den_reg_217 assign process. --
    den_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((exitcond1_fu_300_p2 = ap_const_lv1_0)))) then 
                den_reg_217 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
                den_reg_217 <= grp_fu_240_p2;
            end if; 
        end if;
    end process;

    -- i_1_reg_206 assign process. --
    i_1_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((exitcond1_fu_300_p2 = ap_const_lv1_0)))) then 
                i_1_reg_206 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_42)) then 
                i_1_reg_206 <= i_4_reg_851;
            end if; 
        end if;
    end process;

    -- i_2_reg_229 assign process. --
    i_2_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) and (ap_const_lv1_0 = tmp_13_fu_636_p2))) then 
                i_2_reg_229 <= i_5_fu_642_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
                i_2_reg_229 <= ap_const_lv2_3;
            end if; 
        end if;
    end process;

    -- i_reg_183 assign process. --
    i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
                i_reg_183 <= i_3_reg_806;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                i_reg_183 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- num_reg_194 assign process. --
    num_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
                num_reg_194 <= grp_fu_240_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                num_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- y_1_load_1_fu_118 assign process. --
    y_1_load_1_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) and (ap_const_lv1_0 = tmp_13_fu_636_p2) and (i_2_phi_fu_233_p4 = ap_const_lv2_1))) then 
                y_1_load_1_fu_118 <= y_load_1_phi_fu_707_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and not((ap_const_lv1_0 = exitcond_fu_357_p2)))) then 
                y_1_load_1_fu_118 <= y_1_load_reg_826;
            end if; 
        end if;
    end process;

    -- y_2_load_1_fu_114 assign process. --
    y_2_load_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) and (ap_const_lv1_0 = tmp_13_fu_636_p2) and (i_2_phi_fu_233_p4 = ap_const_lv2_2))) then 
                y_2_load_1_fu_114 <= y_load_1_phi_fu_707_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and not((ap_const_lv1_0 = exitcond_fu_357_p2)))) then 
                y_2_load_1_fu_114 <= y_2_load_reg_832;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) and (ap_const_lv1_0 = tmp_13_fu_636_p2) and (i_2_phi_fu_233_p4 = ap_const_lv2_1))) then
                e_1 <= e_load_1_phi_fu_668_p3;
                y_1 <= y_load_1_phi_fu_707_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) and (ap_const_lv1_0 = tmp_13_fu_636_p2) and (i_2_phi_fu_233_p4 = ap_const_lv2_2))) then
                e_2 <= e_load_1_phi_fu_668_p3;
                y_2 <= y_load_1_phi_fu_707_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) and (ap_const_lv1_0 = tmp_13_fu_636_p2) and not((i_2_phi_fu_233_p4 = ap_const_lv2_2)) and not((i_2_phi_fu_233_p4 = ap_const_lv2_1)))) then
                e_3 <= e_load_1_phi_fu_668_p3;
                y_3 <= y_load_1_phi_fu_707_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then
                e_reg_797 <= grp_fu_240_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                i_3_reg_806 <= i_3_fu_306_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and (ap_const_lv1_0 = exitcond_fu_357_p2))) then
                i_4_reg_851 <= i_4_fu_405_p2;
                params_a_load_phi_reg_841 <= params_a_load_phi_fu_385_p3;
                y_load_phi_reg_846 <= y_load_phi_fu_398_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then
                reg_278 <= grp_fu_261_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then
                reg_284 <= grp_fu_248_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46))) then
                reg_289 <= grp_fu_240_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                tmp_11_reg_875 <= grp_fu_255_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then
                tmp_19_reg_887 <= tmp_19_fu_503_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_1_reg_747 <= grp_fu_267_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then
                tmp_9_reg_880 <= tmp_9_fu_460_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                v_measReal_reg_752 <= v_measReal_fu_252_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then
                x_assign_reg_892 <= x_assign_fu_509_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((exitcond1_fu_300_p2 = ap_const_lv1_0)))) then
                y_1_load_reg_826 <= y_1;
                y_2_load_reg_832 <= y_2;
                y_3_load_reg_821 <= y_3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_300_p2, exitcond_fu_357_p2, tmp_13_fu_636_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                if (not((exitcond1_fu_300_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st34_fsm_33 => 
                if (not((ap_const_lv1_0 = exitcond_fu_357_p2))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                end if;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                if (not((ap_const_lv1_0 = tmp_13_fu_636_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st52_fsm_51;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st52_fsm_51, tmp_13_fu_636_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) and not((ap_const_lv1_0 = tmp_13_fu_636_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st52_fsm_51, tmp_13_fu_636_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st52_fsm_51) and not((ap_const_lv1_0 = tmp_13_fu_636_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_123 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_140 assign process. --
    ap_sig_bdd_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_140 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    -- ap_sig_bdd_155 assign process. --
    ap_sig_bdd_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_155 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_164 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_173 assign process. --
    ap_sig_bdd_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_173 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_204 assign process. --
    ap_sig_bdd_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_204 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_229 assign process. --
    ap_sig_bdd_229_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_229 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    -- ap_sig_bdd_244 assign process. --
    ap_sig_bdd_244_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_244 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    -- ap_sig_bdd_253 assign process. --
    ap_sig_bdd_253_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_253 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    -- ap_sig_bdd_262 assign process. --
    ap_sig_bdd_262_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_262 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_271 assign process. --
    ap_sig_bdd_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_271 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_280 assign process. --
    ap_sig_bdd_280_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_280 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_bdd_289 assign process. --
    ap_sig_bdd_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_289 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    -- ap_sig_bdd_356 assign process. --
    ap_sig_bdd_356_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_356 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_364 assign process. --
    ap_sig_bdd_364_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_364 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    -- ap_sig_bdd_374 assign process. --
    ap_sig_bdd_374_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_374 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    -- ap_sig_bdd_389 assign process. --
    ap_sig_bdd_389_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_389 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_396 assign process. --
    ap_sig_bdd_396_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_396 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_68 assign process. --
    ap_sig_bdd_68_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_68 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_99 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_99)
    begin
        if (ap_sig_bdd_99) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_396)
    begin
        if (ap_sig_bdd_396) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_164)
    begin
        if (ap_sig_bdd_164) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_68)
    begin
        if (ap_sig_bdd_68) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_173)
    begin
        if (ap_sig_bdd_173) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_204)
    begin
        if (ap_sig_bdd_204) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_356)
    begin
        if (ap_sig_bdd_356) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_33 assign process. --
    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_bdd_229)
    begin
        if (ap_sig_bdd_229) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_34 assign process. --
    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_bdd_374)
    begin
        if (ap_sig_bdd_374) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_37 assign process. --
    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_bdd_123)
    begin
        if (ap_sig_bdd_123) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st39_fsm_38 assign process. --
    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_bdd_364)
    begin
        if (ap_sig_bdd_364) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_42 assign process. --
    ap_sig_cseq_ST_st43_fsm_42_assign_proc : process(ap_sig_bdd_244)
    begin
        if (ap_sig_bdd_244) then 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st47_fsm_46 assign process. --
    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_bdd_140)
    begin
        if (ap_sig_bdd_140) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st48_fsm_47 assign process. --
    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_bdd_253)
    begin
        if (ap_sig_bdd_253) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_262)
    begin
        if (ap_sig_bdd_262) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_271)
    begin
        if (ap_sig_bdd_271) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_50 assign process. --
    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_bdd_280)
    begin
        if (ap_sig_bdd_280) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st52_fsm_51 assign process. --
    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_bdd_289)
    begin
        if (ap_sig_bdd_289) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_155)
    begin
        if (ap_sig_bdd_155) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_389)
    begin
        if (ap_sig_bdd_389) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    e_load_1_phi_fu_668_p3 <= 
        e_reg_797 when (sel_tmp4_fu_662_p2(0) = '1') else 
        sel_tmp3_fu_654_p3;
    exitcond1_fu_300_p2 <= "1" when (i_reg_183 = ap_const_lv3_4) else "0";
    exitcond_fu_357_p2 <= "1" when (i_1_reg_206 = ap_const_lv3_4) else "0";
    grp_fu_240_ce <= ap_const_logic_1;

    -- grp_fu_240_opcode assign process. --
    grp_fu_240_opcode_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st34_fsm_33, exitcond_fu_357_p2, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and not((ap_const_lv1_0 = exitcond_fu_357_p2))))) then 
            grp_fu_240_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            grp_fu_240_opcode <= ap_const_lv2_0;
        else 
            grp_fu_240_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_240_p0 assign process. --
    grp_fu_240_p0_assign_proc : process(params_vRef, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st34_fsm_33, num_reg_194, den_reg_217, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            grp_fu_240_p0 <= den_reg_217;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28))) then 
            grp_fu_240_p0 <= num_reg_194;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            grp_fu_240_p0 <= params_vRef;
        else 
            grp_fu_240_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_240_p1 assign process. --
    grp_fu_240_p1_assign_proc : process(reg_284, v_measReal_reg_752, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st34_fsm_33, den_reg_217, ap_sig_cseq_ST_st29_fsm_28, ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_240_p1 <= den_reg_217;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then 
            grp_fu_240_p1 <= reg_284;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            grp_fu_240_p1 <= v_measReal_reg_752;
        else 
            grp_fu_240_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_248_ce <= ap_const_logic_1;

    -- grp_fu_248_p0 assign process. --
    grp_fu_248_p0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, tmp_fu_316_p6, params_a_load_phi_reg_841, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            grp_fu_248_p0 <= params_a_load_phi_reg_841;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_248_p0 <= tmp_fu_316_p6;
        else 
            grp_fu_248_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_248_p1 assign process. --
    grp_fu_248_p1_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, tmp_4_fu_331_p6, y_load_phi_reg_846, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            grp_fu_248_p1 <= y_load_phi_reg_846;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_248_p1 <= tmp_4_fu_331_p6;
        else 
            grp_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_255_opcode assign process. --
    grp_fu_255_opcode_assign_proc : process(ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_255_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            grp_fu_255_opcode <= ap_const_lv5_2;
        else 
            grp_fu_255_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_255_p0 assign process. --
    grp_fu_255_p0_assign_proc : process(reg_289, ap_sig_cseq_ST_st48_fsm_47, tmp_9_reg_880, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_255_p0 <= tmp_9_reg_880;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            grp_fu_255_p0 <= reg_289;
        else 
            grp_fu_255_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_255_p1 assign process. --
    grp_fu_255_p1_assign_proc : process(ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st50_fsm_49)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_255_p1 <= ap_const_lv32_44480000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            grp_fu_255_p1 <= ap_const_lv32_0;
        else 
            grp_fu_255_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_261_ce <= ap_const_logic_1;

    -- grp_fu_261_p0 assign process. --
    grp_fu_261_p0_assign_proc : process(reg_278, tmp_1_reg_747, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_261_p0 <= reg_278;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_261_p0 <= tmp_1_reg_747;
        else 
            grp_fu_261_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_261_p1 assign process. --
    grp_fu_261_p1_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_261_p1 <= ap_const_lv64_3F30000000000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_261_p1 <= ap_const_lv64_400A666666666666;
        else 
            grp_fu_261_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_267_ce <= ap_const_logic_1;
    grp_fu_267_p0 <= std_logic_vector(resize(unsigned(v_meas),32));
    i_2_phi_fu_233_p4 <= i_2_reg_229;
    i_3_fu_306_p2 <= std_logic_vector(unsigned(i_reg_183) + unsigned(ap_const_lv3_1));
    i_4_fu_405_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_1_reg_206));
    i_5_fu_642_p2 <= std_logic_vector(unsigned(i_2_reg_229) + unsigned(ap_const_lv2_3));
    isNeg_fu_555_p3 <= sh_assign_fu_549_p2(8 downto 8);
    loc_V_1_fu_529_p1 <= p_Val2_s_fu_515_p1(23 - 1 downto 0);
    loc_V_fu_519_p4 <= p_Val2_s_fu_515_p1(30 downto 23);
    notlhs1_fu_485_p2 <= "0" when (tmp_15_fu_471_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_437_p2 <= "0" when (tmp_5_fu_423_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_491_p2 <= "1" when (tmp_20_fu_481_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_443_p2 <= "1" when (tmp_16_fu_433_p1 = ap_const_lv23_0) else "0";
    p_Result_s_fu_533_p3 <= (ap_const_lv1_1 & loc_V_1_fu_529_p1);
    p_Val2_s_fu_515_p1 <= x_assign_fu_509_p3;
    params_a_load_phi_fu_385_p3 <= 
        params_a_1 when (sel_tmp2_fu_379_p2(0) = '1') else 
        sel_tmp1_fu_373_p3;
    sel_tmp1_fu_373_p3 <= 
        params_a_2 when (sel_tmp_fu_367_p2(0) = '1') else 
        params_a_3;
    sel_tmp2_fu_379_p2 <= "1" when (tmp_27_fu_363_p1 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_654_p3 <= 
        e_1 when (sel_tmp9_fu_648_p2(0) = '1') else 
        e_2;
    sel_tmp4_fu_662_p2 <= "1" when (i_5_fu_642_p2 = ap_const_lv2_0) else "0";
    sel_tmp5_fu_392_p3 <= 
        y_2_load_reg_832 when (sel_tmp_fu_367_p2(0) = '1') else 
        y_3_load_reg_821;
    sel_tmp6_fu_699_p3 <= 
        y_1_load_1_fu_118 when (sel_tmp9_fu_648_p2(0) = '1') else 
        y_2_load_1_fu_114;
    sel_tmp9_fu_648_p2 <= "1" when (i_5_fu_642_p2 = ap_const_lv2_1) else "0";
    sel_tmp_fu_367_p2 <= "1" when (tmp_27_fu_363_p1 = ap_const_lv2_2) else "0";
        sh_assign_1_cast_cast_fu_585_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_573_p3),24));

        sh_assign_1_cast_fu_581_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_573_p3),32));

    sh_assign_1_fu_573_p3 <= 
        tmp_4_i_i_cast_fu_569_p1 when (isNeg_fu_555_p3(0) = '1') else 
        sh_assign_fu_549_p2;
    sh_assign_fu_549_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast_fu_545_p1));
    tmp_10_fu_449_p2 <= (notrhs_fu_443_p2 or notlhs_fu_437_p2);
    tmp_12_fu_455_p2 <= (tmp_10_fu_449_p2 and tmp_11_reg_875);
    tmp_13_fu_636_p2 <= "1" when (i_2_reg_229 = ap_const_lv2_0) else "0";
    tmp_15_fu_471_p4 <= tmp_9_to_int_fu_468_p1(30 downto 23);
    tmp_16_fu_433_p1 <= tmp_7_to_int_fu_419_p1(23 - 1 downto 0);
    tmp_17_fu_497_p2 <= (notrhs1_fu_491_p2 or notlhs1_fu_485_p2);
    tmp_19_fu_503_p2 <= (tmp_17_fu_497_p2 and grp_fu_255_p2);
    tmp_20_fu_481_p1 <= tmp_9_to_int_fu_468_p1(23 - 1 downto 0);
    tmp_21_fu_613_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_605_p3),10));
    tmp_22_fu_617_p4 <= tmp_9_i_i_fu_599_p2(32 downto 23);
    tmp_23_fu_627_p3 <= 
        tmp_21_fu_613_p1 when (isNeg_fu_555_p3(0) = '1') else 
        tmp_22_fu_617_p4;
    tmp_26_fu_605_p3 <= tmp_7_i_i_fu_593_p2(23 downto 23);
    tmp_27_fu_363_p1 <= i_1_reg_206(2 - 1 downto 0);
    tmp_2_i_i_fu_541_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_533_p3),62));
        tmp_4_i_i_cast_fu_569_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_fu_563_p2),9));

    tmp_4_i_i_fu_563_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_519_p4));
    tmp_5_fu_423_p4 <= tmp_7_to_int_fu_419_p1(30 downto 23);
    tmp_6_i_i_fu_589_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_581_p1),62));
    tmp_7_i_i_fu_593_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_533_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_585_p1(24-1 downto 0)))));
    tmp_7_to_int_fu_419_p1 <= reg_289;
    tmp_8_fu_312_p1 <= i_reg_183(2 - 1 downto 0);
    tmp_9_fu_460_p3 <= 
        reg_289 when (tmp_12_fu_455_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_9_i_i_fu_599_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_fu_541_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_589_p1(31-1 downto 0)))));
    tmp_9_to_int_fu_468_p1 <= tmp_9_reg_880;
    tmp_i_i_i_cast_fu_545_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_519_p4),9));

    -- u assign process. --
    u_assign_proc : process(ap_sig_cseq_ST_st51_fsm_50, tmp_23_fu_627_p3, u_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then 
            u <= tmp_23_fu_627_p3;
        else 
            u <= u_preg;
        end if; 
    end process;

    x_assign_fu_509_p3 <= 
        tmp_9_reg_880 when (tmp_19_reg_887(0) = '1') else 
        ap_const_lv32_44480000;
    y_load_1_phi_fu_707_p3 <= 
        x_assign_reg_892 when (sel_tmp4_fu_662_p2(0) = '1') else 
        sel_tmp6_fu_699_p3;
    y_load_phi_fu_398_p3 <= 
        y_1_load_reg_826 when (sel_tmp2_fu_379_p2(0) = '1') else 
        sel_tmp5_fu_392_p3;
end behav;
