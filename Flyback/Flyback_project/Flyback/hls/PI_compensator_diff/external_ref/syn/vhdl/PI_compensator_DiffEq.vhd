-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PI_compensator_DiffEq is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_ref : IN STD_LOGIC_VECTOR (31 downto 0);
    v_meas : IN STD_LOGIC_VECTOR (11 downto 0);
    u : OUT STD_LOGIC_VECTOR (9 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of PI_compensator_DiffEq is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "PI_compensator_DiffEq,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.613500,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=1491,HLS_SYN_LUT=2804}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_47 : BOOLEAN;
    signal X_MAX : STD_LOGIC_VECTOR (9 downto 0);
    signal b0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1 : STD_LOGIC_VECTOR (31 downto 0);
    signal yVmeasDbg : STD_LOGIC_VECTOR (31 downto 0);
    signal yVmeasDbg_ap_vld : STD_LOGIC;
    signal yDbg : STD_LOGIC_VECTOR (31 downto 0);
    signal yDbg_ap_vld : STD_LOGIC;
    signal eDbg : STD_LOGIC_VECTOR (31 downto 0);
    signal eDbg_ap_vld : STD_LOGIC;
    signal uDbg : STD_LOGIC_VECTOR (9 downto 0);
    signal uDbg_ap_vld : STD_LOGIC;
    signal x0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal e0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal PI_compensator_DiffEq_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_119 : BOOLEAN;
    signal y2_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal e0_loc_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_160 : BOOLEAN;
    signal X_MAX_read_reg_498 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_175 : BOOLEAN;
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_186 : BOOLEAN;
    signal tmp_10_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_197 : BOOLEAN;
    signal tmp_6_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_244_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_207 : BOOLEAN;
    signal tmp_17_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_220 : BOOLEAN;
    signal tmp_25_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_565 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_assign_fu_333_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_456_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_236 : BOOLEAN;
    signal grp_fu_149_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_245 : BOOLEAN;
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_to_int_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_206_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_216_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_to_int_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_to_int_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_256_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_266_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_283_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_359_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_363_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_349_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast1_fu_375_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_379_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i_i_cast_fu_399_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_403_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_415_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_fu_371_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_6_i_i_fu_419_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_7_i_i_fu_423_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i_i_fu_429_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_20_fu_453_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_149_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_149_ce : STD_LOGIC;
    signal grp_fu_154_ce : STD_LOGIC;
    signal grp_fu_159_ce : STD_LOGIC;
    signal grp_fu_164_ce : STD_LOGIC;
    signal grp_fu_167_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component PI_compensator_DiffEq_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PI_compensator_DiffEq_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PI_compensator_DiffEq_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PI_compensator_DiffEq_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component PI_compensator_DiffEq_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        X_MAX : OUT STD_LOGIC_VECTOR (9 downto 0);
        b0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        b1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        yVmeasDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        yVmeasDbg_ap_vld : IN STD_LOGIC;
        yDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        yDbg_ap_vld : IN STD_LOGIC;
        eDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        eDbg_ap_vld : IN STD_LOGIC;
        uDbg : IN STD_LOGIC_VECTOR (9 downto 0);
        uDbg_ap_vld : IN STD_LOGIC );
    end component;



begin
    PI_compensator_DiffEq_AXILiteS_s_axi_U : component PI_compensator_DiffEq_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => PI_compensator_DiffEq_AXILiteS_s_axi_U_ap_dummy_ce,
        X_MAX => X_MAX,
        b0 => b0,
        b1 => b1,
        yVmeasDbg => yVmeasDbg,
        yVmeasDbg_ap_vld => yVmeasDbg_ap_vld,
        yDbg => yDbg,
        yDbg_ap_vld => yDbg_ap_vld,
        eDbg => eDbg,
        eDbg_ap_vld => eDbg_ap_vld,
        uDbg => uDbg,
        uDbg_ap_vld => uDbg_ap_vld);

    PI_compensator_DiffEq_faddfsub_32ns_32ns_32_5_full_dsp_U0 : component PI_compensator_DiffEq_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_149_p0,
        din1 => grp_fu_149_p1,
        opcode => grp_fu_149_opcode,
        ce => grp_fu_149_ce,
        dout => grp_fu_149_p2);

    PI_compensator_DiffEq_fmul_32ns_32ns_32_4_max_dsp_U1 : component PI_compensator_DiffEq_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => e0_loc_reg_481,
        din1 => b0,
        ce => grp_fu_154_ce,
        dout => grp_fu_154_p2);

    PI_compensator_DiffEq_fmul_32ns_32ns_32_4_max_dsp_U2 : component PI_compensator_DiffEq_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => e0,
        din1 => b1,
        ce => grp_fu_159_ce,
        dout => grp_fu_159_p2);

    PI_compensator_DiffEq_sitofp_32ns_32_6_U3 : component PI_compensator_DiffEq_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_164_p0,
        ce => grp_fu_164_ce,
        dout => grp_fu_164_p1);

    PI_compensator_DiffEq_fcmp_32ns_32ns_1_1_U4 : component PI_compensator_DiffEq_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_167_p0,
        din1 => grp_fu_167_p1,
        opcode => grp_fu_167_opcode,
        dout => grp_fu_167_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                X_MAX_read_reg_498 <= X_MAX;
                e0 <= e0_loc_reg_481;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                e0_loc_reg_481 <= grp_fu_149_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                isNeg_reg_555 <= sh_assign_fu_379_p2(8 downto 8);
                tmp_21_reg_565 <= tmp_9_i_i_fu_429_p2(32 downto 23);
                tmp_25_reg_560 <= tmp_7_i_i_fu_423_p2(23 downto 23);
                x0 <= x_assign_fu_333_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24))) then
                reg_172 <= grp_fu_149_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                tmp_10_reg_528 <= tmp_10_fu_238_p2;
                tmp_6_reg_533 <= grp_fu_164_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                tmp_17_reg_545 <= tmp_17_fu_323_p2;
                tmp_18_reg_550 <= grp_fu_167_p2;
                tmp_5_reg_540 <= tmp_5_fu_244_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                tmp_1_reg_513 <= grp_fu_159_p2;
                tmp_s_reg_508 <= grp_fu_154_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                y_reg_469 <= grp_fu_164_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    PI_compensator_DiffEq_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_119 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_143 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_151 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_160 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_175 assign process. --
    ap_sig_bdd_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_175 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_186 assign process. --
    ap_sig_bdd_186_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_186 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_197 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_207 assign process. --
    ap_sig_bdd_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_207 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_220 assign process. --
    ap_sig_bdd_220_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_220 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_236 assign process. --
    ap_sig_bdd_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_236 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_245 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_47 assign process. --
    ap_sig_bdd_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_47 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_151)
    begin
        if (ap_sig_bdd_151) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_160)
    begin
        if (ap_sig_bdd_160) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_175)
    begin
        if (ap_sig_bdd_175) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_47)
    begin
        if (ap_sig_bdd_47) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_186)
    begin
        if (ap_sig_bdd_186) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_119)
    begin
        if (ap_sig_bdd_119) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_25 assign process. --
    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_bdd_197)
    begin
        if (ap_sig_bdd_197) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_26 assign process. --
    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_bdd_207)
    begin
        if (ap_sig_bdd_207) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_27 assign process. --
    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_bdd_220)
    begin
        if (ap_sig_bdd_220) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_236)
    begin
        if (ap_sig_bdd_236) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_143)
    begin
        if (ap_sig_bdd_143) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    eDbg <= e0_loc_reg_481;

    -- eDbg_ap_vld assign process. --
    eDbg_ap_vld_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            eDbg_ap_vld <= ap_const_logic_1;
        else 
            eDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_149_ce <= ap_const_logic_1;

    -- grp_fu_149_opcode assign process. --
    grp_fu_149_opcode_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_149_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            grp_fu_149_opcode <= ap_const_lv2_0;
        else 
            grp_fu_149_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_149_p0 assign process. --
    grp_fu_149_p0_assign_proc : process(v_ref, reg_172, ap_sig_cseq_ST_st7_fsm_6, tmp_s_reg_508, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            grp_fu_149_p0 <= reg_172;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_149_p0 <= tmp_s_reg_508;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_149_p0 <= v_ref;
        else 
            grp_fu_149_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_149_p1 assign process. --
    grp_fu_149_p1_assign_proc : process(x0, y_reg_469, ap_sig_cseq_ST_st7_fsm_6, tmp_1_reg_513, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            grp_fu_149_p1 <= x0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_149_p1 <= tmp_1_reg_513;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_149_p1 <= y_reg_469;
        else 
            grp_fu_149_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_154_ce <= ap_const_logic_1;
    grp_fu_159_ce <= ap_const_logic_1;
    grp_fu_164_ce <= ap_const_logic_1;

    -- grp_fu_164_p0 assign process. --
    grp_fu_164_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, y2_fu_178_p1, tmp_fu_193_p1, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            grp_fu_164_p0 <= tmp_fu_193_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_164_p0 <= y2_fu_178_p1;
        else 
            grp_fu_164_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_167_opcode assign process. --
    grp_fu_167_opcode_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st27_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_167_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            grp_fu_167_opcode <= ap_const_lv5_2;
        else 
            grp_fu_167_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_167_p0 assign process. --
    grp_fu_167_p0_assign_proc : process(reg_172, ap_sig_cseq_ST_st26_fsm_25, tmp_5_fu_244_p3, ap_sig_cseq_ST_st27_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_167_p0 <= tmp_5_fu_244_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            grp_fu_167_p0 <= reg_172;
        else 
            grp_fu_167_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_167_p1 assign process. --
    grp_fu_167_p1_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25, tmp_6_reg_533, ap_sig_cseq_ST_st27_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_167_p1 <= tmp_6_reg_533;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            grp_fu_167_p1 <= ap_const_lv32_0;
        else 
            grp_fu_167_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    isNeg_fu_385_p3 <= sh_assign_fu_379_p2(8 downto 8);
    loc_V_1_fu_359_p1 <= p_Val2_s_fu_345_p1(23 - 1 downto 0);
    loc_V_fu_349_p4 <= p_Val2_s_fu_345_p1(30 downto 23);
    notlhs3_fu_287_p2 <= "0" when (tmp_11_fu_256_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_305_p2 <= "0" when (tmp_13_fu_273_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_220_p2 <= "0" when (tmp_4_fu_206_p4 = ap_const_lv8_FF) else "1";
    notrhs4_fu_293_p2 <= "1" when (tmp_12_fu_266_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_311_p2 <= "1" when (tmp_14_fu_283_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_226_p2 <= "1" when (tmp_7_fu_216_p1 = ap_const_lv23_0) else "0";
    p_Result_s_fu_363_p3 <= (ap_const_lv1_1 & loc_V_1_fu_359_p1);
    p_Val2_s_fu_345_p1 <= x_assign_fu_333_p3;
        sh_assign_1_cast_cast_fu_415_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_403_p3),24));

        sh_assign_1_cast_fu_411_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_403_p3),32));

    sh_assign_1_fu_403_p3 <= 
        tmp_4_i_i_cast_fu_399_p1 when (isNeg_fu_385_p3(0) = '1') else 
        sh_assign_fu_379_p2;
    sh_assign_fu_379_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast1_fu_375_p1));
    tmp_10_fu_238_p2 <= (tmp_8_fu_232_p2 and grp_fu_167_p2);
    tmp_11_fu_256_p4 <= tmp_5_to_int_fu_252_p1(30 downto 23);
    tmp_12_fu_266_p1 <= tmp_5_to_int_fu_252_p1(23 - 1 downto 0);
    tmp_13_fu_273_p4 <= tmp_6_to_int_fu_270_p1(30 downto 23);
    tmp_14_fu_283_p1 <= tmp_6_to_int_fu_270_p1(23 - 1 downto 0);
    tmp_15_fu_299_p2 <= (notrhs4_fu_293_p2 or notlhs3_fu_287_p2);
    tmp_16_fu_317_p2 <= (notrhs6_fu_311_p2 or notlhs5_fu_305_p2);
    tmp_17_fu_323_p2 <= (tmp_15_fu_299_p2 and tmp_16_fu_317_p2);
    tmp_19_fu_329_p2 <= (tmp_17_reg_545 and tmp_18_reg_550);
    tmp_20_fu_453_p1 <= std_logic_vector(resize(unsigned(tmp_25_reg_560),10));
    tmp_22_fu_456_p3 <= 
        tmp_20_fu_453_p1 when (isNeg_reg_555(0) = '1') else 
        tmp_21_reg_565;
    tmp_2_i_i_fu_371_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_363_p3),62));
    tmp_3_to_int_fu_202_p1 <= reg_172;
    tmp_4_fu_206_p4 <= tmp_3_to_int_fu_202_p1(30 downto 23);
        tmp_4_i_i_cast_fu_399_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_fu_393_p2),9));

    tmp_4_i_i_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_349_p4));
    tmp_5_fu_244_p3 <= 
        reg_172 when (tmp_10_reg_528(0) = '1') else 
        ap_const_lv32_0;
    tmp_5_to_int_fu_252_p1 <= tmp_5_fu_244_p3;
    tmp_6_i_i_fu_419_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_411_p1),62));
    tmp_6_to_int_fu_270_p1 <= tmp_6_reg_533;
    tmp_7_fu_216_p1 <= tmp_3_to_int_fu_202_p1(23 - 1 downto 0);
    tmp_7_i_i_fu_423_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_363_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_415_p1(24-1 downto 0)))));
    tmp_8_fu_232_p2 <= (notrhs_fu_226_p2 or notlhs_fu_220_p2);
    tmp_9_i_i_fu_429_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_fu_371_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_419_p1(31-1 downto 0)))));
    tmp_fu_193_p1 <= std_logic_vector(resize(unsigned(X_MAX_read_reg_498),32));
    tmp_i_i_i_cast1_fu_375_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_349_p4),9));
    u <= tmp_22_fu_456_p3;
    uDbg <= tmp_22_fu_456_p3;

    -- uDbg_ap_vld assign process. --
    uDbg_ap_vld_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            uDbg_ap_vld <= ap_const_logic_1;
        else 
            uDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    x_assign_fu_333_p3 <= 
        tmp_5_reg_540 when (tmp_19_fu_329_p2(0) = '1') else 
        tmp_6_reg_533;
    y2_fu_178_p1 <= std_logic_vector(resize(unsigned(v_meas),32));
    yDbg <= y_reg_469;

    -- yDbg_ap_vld assign process. --
    yDbg_ap_vld_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            yDbg_ap_vld <= ap_const_logic_1;
        else 
            yDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    yVmeasDbg <= y_reg_469;

    -- yVmeasDbg_ap_vld assign process. --
    yVmeasDbg_ap_vld_assign_proc : process(ap_sig_cseq_ST_st29_fsm_28)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28)) then 
            yVmeasDbg_ap_vld <= ap_const_logic_1;
        else 
            yVmeasDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
