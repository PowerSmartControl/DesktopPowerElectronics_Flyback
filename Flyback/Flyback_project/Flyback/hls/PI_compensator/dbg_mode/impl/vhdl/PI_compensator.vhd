-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PI_compensator is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_meas : IN STD_LOGIC_VECTOR (11 downto 0);
    u : OUT STD_LOGIC_VECTOR (9 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of PI_compensator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "PI_compensator,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.256000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1526,HLS_SYN_LUT=2955}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_51 : BOOLEAN;
    signal v_ref : STD_LOGIC_VECTOR (31 downto 0);
    signal X_MAX : STD_LOGIC_VECTOR (9 downto 0);
    signal Kp : STD_LOGIC_VECTOR (31 downto 0);
    signal Ki2 : STD_LOGIC_VECTOR (31 downto 0);
    signal yVmeasDbg : STD_LOGIC_VECTOR (31 downto 0);
    signal yVmeasDbg_ap_vld : STD_LOGIC;
    signal yDbg : STD_LOGIC_VECTOR (31 downto 0);
    signal yDbg_ap_vld : STD_LOGIC;
    signal eDbg : STD_LOGIC_VECTOR (31 downto 0);
    signal eDbg_ap_vld : STD_LOGIC;
    signal uDbg : STD_LOGIC_VECTOR (9 downto 0);
    signal uDbg_ap_vld : STD_LOGIC;
    signal sat : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal x_integral : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal PI_compensator_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_117 : BOOLEAN;
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_124 : BOOLEAN;
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_141 : BOOLEAN;
    signal y1_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal Ki2_read_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_165 : BOOLEAN;
    signal Kp_read_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_MAX_read_reg_669 : STD_LOGIC_VECTOR (9 downto 0);
    signal e_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_179 : BOOLEAN;
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal tmp_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_197 : BOOLEAN;
    signal or_cond_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_215 : BOOLEAN;
    signal tmp_7_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_225 : BOOLEAN;
    signal tmp_18_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_integral_new_fu_394_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_integral_new_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_240 : BOOLEAN;
    signal x_1_fu_466_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_249 : BOOLEAN;
    signal tmp_32_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_tmp_7_fu_519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_259 : BOOLEAN;
    signal x_assign_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge1_fu_405_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_fu_637_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_bdd_274 : BOOLEAN;
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_283 : BOOLEAN;
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_292 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_299 : BOOLEAN;
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_to_int_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_224_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_234_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_to_int_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_292_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_302_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_to_int_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_333_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_343_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_cast_fu_401_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_to_int_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_428_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_438_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_to_int_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_477_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_487_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_525_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_539_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_543_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_529_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast8_fu_555_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_559_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_fu_573_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_565_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_cast_fu_579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_583_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_595_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_fu_551_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_6_i_i_fu_599_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_7_i_i_fu_603_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_41_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_609_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_34_fu_623_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_fu_627_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_168_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_168_ce : STD_LOGIC;
    signal grp_fu_173_ce : STD_LOGIC;
    signal grp_fu_177_ce : STD_LOGIC;
    signal grp_fu_180_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_185_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal or_cond2_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component PI_compensator_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PI_compensator_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PI_compensator_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PI_compensator_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component PI_compensator_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        v_ref : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_MAX : OUT STD_LOGIC_VECTOR (9 downto 0);
        Kp : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ki2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        yVmeasDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        yVmeasDbg_ap_vld : IN STD_LOGIC;
        yDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        yDbg_ap_vld : IN STD_LOGIC;
        eDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        eDbg_ap_vld : IN STD_LOGIC;
        uDbg : IN STD_LOGIC_VECTOR (9 downto 0);
        uDbg_ap_vld : IN STD_LOGIC );
    end component;



begin
    PI_compensator_AXILiteS_s_axi_U : component PI_compensator_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => PI_compensator_AXILiteS_s_axi_U_ap_dummy_ce,
        v_ref => v_ref,
        X_MAX => X_MAX,
        Kp => Kp,
        Ki2 => Ki2,
        yVmeasDbg => yVmeasDbg,
        yVmeasDbg_ap_vld => yVmeasDbg_ap_vld,
        yDbg => yDbg,
        yDbg_ap_vld => yDbg_ap_vld,
        eDbg => eDbg,
        eDbg_ap_vld => eDbg_ap_vld,
        uDbg => uDbg,
        uDbg_ap_vld => uDbg_ap_vld);

    PI_compensator_faddfsub_32ns_32ns_32_5_full_dsp_U0 : component PI_compensator_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        opcode => grp_fu_168_opcode,
        ce => grp_fu_168_ce,
        dout => grp_fu_168_p2);

    PI_compensator_fmul_32ns_32ns_32_4_max_dsp_U1 : component PI_compensator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => e_reg_679,
        din1 => grp_fu_173_p1,
        ce => grp_fu_173_ce,
        dout => grp_fu_173_p2);

    PI_compensator_sitofp_32ns_32_6_U2 : component PI_compensator_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_177_p0,
        ce => grp_fu_177_ce,
        dout => grp_fu_177_p1);

    PI_compensator_fcmp_32ns_32ns_1_1_U3 : component PI_compensator_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        opcode => grp_fu_180_opcode,
        dout => grp_fu_180_p2);

    PI_compensator_fcmp_32ns_32ns_1_1_U4 : component PI_compensator_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_195,
        din1 => tmp_7_reg_719,
        opcode => tmp_21_fu_185_opcode,
        dout => tmp_21_fu_185_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                Ki2_read_reg_659 <= Ki2;
                Kp_read_reg_664 <= Kp;
                X_MAX_read_reg_669 <= X_MAX;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                e_reg_679 <= grp_fu_168_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                or_cond_reg_697 <= or_cond_fu_261_p2;
                    tmp_reg_692(9 downto 0) <= tmp_fu_206_p1(9 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then
                reg_189 <= grp_fu_173_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) or (ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_28))) then
                reg_195 <= grp_fu_168_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then
                sat <= storemerge1_fu_405_p3;
                x_integral <= x_integral_new_fu_394_p3;
                x_integral_new_reg_745 <= x_integral_new_fu_394_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (or_cond_fu_261_p2 = ap_const_lv1_0))) then
                tmp_11_reg_706 <= tmp_11_fu_273_p2;
                tmp_2_reg_701 <= tmp_2_fu_267_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                tmp_16_reg_728 <= tmp_16_fu_324_p2;
                tmp_18_reg_735 <= tmp_18_fu_359_p2;
                tmp_22_reg_740 <= tmp_22_fu_371_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                tmp_27_reg_750 <= tmp_27_fu_460_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                tmp_32_reg_761 <= grp_fu_180_p2;
                x_1_reg_755 <= x_1_fu_466_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                tmp_7_reg_719 <= grp_fu_177_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_8_reg_687 <= grp_fu_180_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                x_assign_reg_157 <= x_1_tmp_7_fu_519_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                y_reg_652 <= grp_fu_177_p1;
            end if;
        end if;
    end process;
    tmp_reg_692(31 downto 10) <= "0000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, or_cond_reg_697, or_cond2_fu_279_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if ((not((or_cond_reg_697 = ap_const_lv1_0)) or not((ap_const_lv1_0 = or_cond2_fu_279_p2)))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    PI_compensator_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_117 assign process. --
    ap_sig_bdd_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_117 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_124 assign process. --
    ap_sig_bdd_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_124 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_141 assign process. --
    ap_sig_bdd_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_141 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_156 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_165 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_179 assign process. --
    ap_sig_bdd_179_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_179 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_197 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_215 assign process. --
    ap_sig_bdd_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_215 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_225 assign process. --
    ap_sig_bdd_225_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_225 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_240 assign process. --
    ap_sig_bdd_240_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_240 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_249 assign process. --
    ap_sig_bdd_249_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_249 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_259 assign process. --
    ap_sig_bdd_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_259 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_bdd_274 assign process. --
    ap_sig_bdd_274_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_274 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    -- ap_sig_bdd_283 assign process. --
    ap_sig_bdd_283_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_283 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_292 assign process. --
    ap_sig_bdd_292_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_292 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_299 assign process. --
    ap_sig_bdd_299_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_299 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_51 assign process. --
    ap_sig_bdd_51_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_51 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_179)
    begin
        if (ap_sig_bdd_179) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_197)
    begin
        if (ap_sig_bdd_197) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_292)
    begin
        if (ap_sig_bdd_292) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_117)
    begin
        if (ap_sig_bdd_117) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_215)
    begin
        if (ap_sig_bdd_215) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_51)
    begin
        if (ap_sig_bdd_51) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_299)
    begin
        if (ap_sig_bdd_299) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_225)
    begin
        if (ap_sig_bdd_225) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_124)
    begin
        if (ap_sig_bdd_124) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_283)
    begin
        if (ap_sig_bdd_283) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_28 assign process. --
    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_bdd_141)
    begin
        if (ap_sig_bdd_141) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st30_fsm_29 assign process. --
    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_bdd_240)
    begin
        if (ap_sig_bdd_240) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st31_fsm_30 assign process. --
    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_bdd_249)
    begin
        if (ap_sig_bdd_249) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_31 assign process. --
    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_bdd_259)
    begin
        if (ap_sig_bdd_259) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_32 assign process. --
    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_bdd_274)
    begin
        if (ap_sig_bdd_274) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_156)
    begin
        if (ap_sig_bdd_156) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_165)
    begin
        if (ap_sig_bdd_165) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    eDbg <= e_reg_679;

    -- eDbg_ap_vld assign process. --
    eDbg_ap_vld_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            eDbg_ap_vld <= ap_const_logic_1;
        else 
            eDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    e_to_int_fu_221_p1 <= e_reg_679;
    grp_fu_168_ce <= ap_const_logic_1;

    -- grp_fu_168_opcode assign process. --
    grp_fu_168_opcode_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_168_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24))) then 
            grp_fu_168_opcode <= ap_const_lv2_0;
        else 
            grp_fu_168_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_168_p0 assign process. --
    grp_fu_168_p0_assign_proc : process(v_ref, x_integral, reg_189, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_168_p0 <= reg_189;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_168_p0 <= x_integral;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_168_p0 <= v_ref;
        else 
            grp_fu_168_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_168_p1 assign process. --
    grp_fu_168_p1_assign_proc : process(reg_189, y_reg_652, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st18_fsm_17, x_integral_new_reg_745, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            grp_fu_168_p1 <= x_integral_new_reg_745;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_168_p1 <= reg_189;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_168_p1 <= y_reg_652;
        else 
            grp_fu_168_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_173_ce <= ap_const_logic_1;

    -- grp_fu_173_p1 assign process. --
    grp_fu_173_p1_assign_proc : process(Ki2_read_reg_659, Kp_read_reg_664, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            grp_fu_173_p1 <= Kp_read_reg_664;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_173_p1 <= Ki2_read_reg_659;
        else 
            grp_fu_173_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_177_ce <= ap_const_logic_1;

    -- grp_fu_177_p0 assign process. --
    grp_fu_177_p0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st17_fsm_16, y1_fu_201_p1, tmp_reg_692)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_177_p0 <= tmp_reg_692;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            grp_fu_177_p0 <= y1_fu_201_p1;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_180_opcode assign process. --
    grp_fu_180_opcode_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12, or_cond_fu_261_p2, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st31_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (or_cond_fu_261_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            grp_fu_180_opcode <= ap_const_lv5_2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then 
            grp_fu_180_opcode <= ap_const_lv5_4;
        else 
            grp_fu_180_opcode <= "XXXXX";
        end if; 
    end process;


    -- grp_fu_180_p0 assign process. --
    grp_fu_180_p0_assign_proc : process(reg_195, e_reg_679, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st30_fsm_29, x_1_fu_466_p3, ap_sig_cseq_ST_st31_fsm_30)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_180_p0 <= x_1_fu_466_p3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            grp_fu_180_p0 <= reg_195;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            grp_fu_180_p0 <= e_reg_679;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_180_p1 assign process. --
    grp_fu_180_p1_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st13_fsm_12, tmp_7_reg_719, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st30_fsm_29, ap_sig_cseq_ST_st31_fsm_30)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            grp_fu_180_p1 <= tmp_7_reg_719;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29))) then 
            grp_fu_180_p1 <= ap_const_lv32_0;
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    isNeg_fu_565_p3 <= sh_assign_fu_559_p2(8 downto 8);
    loc_V_1_fu_539_p1 <= p_Val2_s_fu_525_p1(23 - 1 downto 0);
    loc_V_fu_529_p4 <= p_Val2_s_fu_525_p1(30 downto 23);
    notlhs2_fu_306_p2 <= "0" when (tmp_12_fu_292_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_347_p2 <= "0" when (tmp_17_fu_333_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_442_p2 <= "0" when (tmp_23_fu_428_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_491_p2 <= "0" when (tmp_28_fu_477_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_238_p2 <= "0" when (tmp_1_fu_224_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_312_p2 <= "1" when (tmp_19_fu_302_p1 = ap_const_lv23_0) else "0";
    notrhs4_fu_353_p2 <= "1" when (tmp_25_fu_343_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_448_p2 <= "1" when (tmp_30_fu_438_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_497_p2 <= "1" when (tmp_35_fu_487_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_244_p2 <= "1" when (tmp_14_fu_234_p1 = ap_const_lv23_0) else "0";
    or_cond2_fu_279_p2 <= (tmp_2_reg_701 and tmp_11_reg_706);
    or_cond_fu_261_p2 <= (tmp_3_fu_213_p3 and tmp_9_fu_256_p2);
    p_Result_s_fu_543_p3 <= (ap_const_lv1_1 & loc_V_1_fu_539_p1);
    p_Val2_s_fu_525_p1 <= x_assign_reg_157;
    sel_tmp1_fu_382_p2 <= (tmp_22_reg_740 and sel_tmp_fu_377_p2);
    sel_tmp2_fu_387_p3 <= 
        tmp_7_reg_719 when (sel_tmp1_fu_382_p2(0) = '1') else 
        reg_195;
    sel_tmp6_cast_fu_401_p1 <= std_logic_vector(resize(unsigned(sel_tmp1_fu_382_p2),2));
    sel_tmp_fu_377_p2 <= (tmp_16_reg_728 xor ap_const_lv1_1);
        sh_assign_1_cast_cast_fu_595_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_583_p3),24));

        sh_assign_1_cast_fu_591_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_583_p3),32));

    sh_assign_1_fu_583_p3 <= 
        tmp_4_i_i_cast_fu_579_p1 when (isNeg_fu_565_p3(0) = '1') else 
        sh_assign_fu_559_p2;
    sh_assign_fu_559_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast8_fu_555_p1));
    storemerge1_fu_405_p3 <= 
        ap_const_lv2_3 when (tmp_16_reg_728(0) = '1') else 
        sel_tmp6_cast_fu_401_p1;
    tmp_11_fu_273_p2 <= (tmp_6_fu_250_p2 and grp_fu_180_p2);
    tmp_12_fu_292_p4 <= tmp_5_to_int_fu_288_p1(30 downto 23);
    tmp_13_fu_318_p2 <= (notrhs2_fu_312_p2 or notlhs2_fu_306_p2);
    tmp_14_fu_234_p1 <= e_to_int_fu_221_p1(23 - 1 downto 0);
    tmp_16_fu_324_p2 <= (tmp_13_fu_318_p2 and grp_fu_180_p2);
    tmp_17_fu_333_p4 <= tmp_7_to_int_fu_330_p1(30 downto 23);
    tmp_18_fu_359_p2 <= (notrhs4_fu_353_p2 or notlhs4_fu_347_p2);
    tmp_19_fu_302_p1 <= tmp_5_to_int_fu_288_p1(23 - 1 downto 0);
    tmp_1_fu_224_p4 <= e_to_int_fu_221_p1(30 downto 23);
    tmp_20_fu_365_p2 <= (tmp_13_fu_318_p2 and tmp_18_fu_359_p2);
    tmp_21_fu_185_opcode <= ap_const_lv5_2;
    tmp_22_fu_371_p2 <= (tmp_20_fu_365_p2 and tmp_21_fu_185_p2);
    tmp_23_fu_428_p4 <= x_to_int_fu_424_p1(30 downto 23);
    tmp_24_fu_454_p2 <= (notrhs5_fu_448_p2 or notlhs5_fu_442_p2);
    tmp_25_fu_343_p1 <= tmp_7_to_int_fu_330_p1(23 - 1 downto 0);
    tmp_27_fu_460_p2 <= (tmp_24_fu_454_p2 and grp_fu_180_p2);
    tmp_28_fu_477_p4 <= x_1_to_int_fu_474_p1(30 downto 23);
    tmp_29_fu_503_p2 <= (notrhs6_fu_497_p2 or notlhs6_fu_491_p2);
    tmp_2_fu_267_p2 <= "1" when (sat = ap_const_lv2_1) else "0";
    tmp_2_i_i_fu_551_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_543_p3),62));
    tmp_30_fu_438_p1 <= x_to_int_fu_424_p1(23 - 1 downto 0);
    tmp_31_fu_509_p2 <= (tmp_29_fu_503_p2 and tmp_18_reg_735);
    tmp_33_fu_514_p2 <= (tmp_31_fu_509_p2 and tmp_32_reg_761);
    tmp_34_fu_623_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_615_p3),10));
    tmp_35_fu_487_p1 <= x_1_to_int_fu_474_p1(23 - 1 downto 0);
    tmp_36_fu_627_p4 <= tmp_9_i_i_fu_609_p2(32 downto 23);
    tmp_37_fu_637_p3 <= 
        tmp_34_fu_623_p1 when (isNeg_fu_565_p3(0) = '1') else 
        tmp_36_fu_627_p4;
    tmp_3_fu_213_p3 <= sat(1 downto 1);
    tmp_41_fu_615_p3 <= tmp_7_i_i_fu_603_p2(23 downto 23);
        tmp_4_i_i_cast_fu_579_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_fu_573_p2),9));

    tmp_4_i_i_fu_573_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_529_p4));
    tmp_5_to_int_fu_288_p1 <= reg_195;
    tmp_6_fu_250_p2 <= (notrhs_fu_244_p2 or notlhs_fu_238_p2);
    tmp_6_i_i_fu_599_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_591_p1),62));
    tmp_7_i_i_fu_603_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_543_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_595_p1(24-1 downto 0)))));
    tmp_7_to_int_fu_330_p1 <= tmp_7_reg_719;
    tmp_9_fu_256_p2 <= (tmp_6_fu_250_p2 and tmp_8_reg_687);
    tmp_9_i_i_fu_609_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_fu_551_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_599_p1(31-1 downto 0)))));
    tmp_fu_206_p1 <= std_logic_vector(resize(unsigned(X_MAX_read_reg_669),32));
    tmp_i_i_i_cast8_fu_555_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_529_p4),9));
    u <= tmp_37_fu_637_p3;
    uDbg <= tmp_37_fu_637_p3;

    -- uDbg_ap_vld assign process. --
    uDbg_ap_vld_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            uDbg_ap_vld <= ap_const_logic_1;
        else 
            uDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_466_p3 <= 
        reg_195 when (tmp_27_reg_750(0) = '1') else 
        ap_const_lv32_0;
    x_1_tmp_7_fu_519_p3 <= 
        x_1_reg_755 when (tmp_33_fu_514_p2(0) = '1') else 
        tmp_7_reg_719;
    x_1_to_int_fu_474_p1 <= x_1_reg_755;
    x_integral_new_fu_394_p3 <= 
        ap_const_lv32_0 when (tmp_16_reg_728(0) = '1') else 
        sel_tmp2_fu_387_p3;
    x_to_int_fu_424_p1 <= reg_195;
    y1_fu_201_p1 <= std_logic_vector(resize(unsigned(v_meas),32));
    yDbg <= y_reg_652;

    -- yDbg_ap_vld assign process. --
    yDbg_ap_vld_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            yDbg_ap_vld <= ap_const_logic_1;
        else 
            yDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    yVmeasDbg <= y_reg_652;

    -- yVmeasDbg_ap_vld assign process. --
    yVmeasDbg_ap_vld_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            yVmeasDbg_ap_vld <= ap_const_logic_1;
        else 
            yVmeasDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
