// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module PI_compensator_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 7,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    // user signals
    output wire [31:0]                   v_ref,
    output wire [9:0]                    X_MAX,
    output wire [31:0]                   Kp,
    output wire [31:0]                   Ki2,
    input  wire [31:0]                   yVmeasDbg,
    input  wire                          yVmeasDbg_ap_vld,
    input  wire [31:0]                   yDbg,
    input  wire                          yDbg_ap_vld,
    input  wire [31:0]                   eDbg,
    input  wire                          eDbg_ap_vld,
    input  wire [9:0]                    uDbg,
    input  wire                          uDbg_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : Data signal of v_ref
//        bit 31~0 - v_ref[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of X_MAX
//        bit 9~0 - X_MAX[9:0] (Read/Write)
//        others  - reserved
// 0x1c : reserved
// 0x20 : Data signal of Kp
//        bit 31~0 - Kp[31:0] (Read/Write)
// 0x24 : reserved
// 0x28 : Data signal of Ki2
//        bit 31~0 - Ki2[31:0] (Read/Write)
// 0x2c : reserved
// 0x30 : Data signal of yVmeasDbg
//        bit 31~0 - yVmeasDbg[31:0] (Read)
// 0x34 : Control signal of yVmeasDbg
//        bit 0  - yVmeasDbg_ap_vld (Read/COR)
//        others - reserved
// 0x38 : Data signal of yDbg
//        bit 31~0 - yDbg[31:0] (Read)
// 0x3c : Control signal of yDbg
//        bit 0  - yDbg_ap_vld (Read/COR)
//        others - reserved
// 0x40 : Data signal of eDbg
//        bit 31~0 - eDbg[31:0] (Read)
// 0x44 : Control signal of eDbg
//        bit 0  - eDbg_ap_vld (Read/COR)
//        others - reserved
// 0x48 : Data signal of uDbg
//        bit 9~0 - uDbg[9:0] (Read)
//        others  - reserved
// 0x4c : Control signal of uDbg
//        bit 0  - uDbg_ap_vld (Read/COR)
//        others - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_V_REF_DATA_0     = 7'h10,
    ADDR_V_REF_CTRL       = 7'h14,
    ADDR_X_MAX_DATA_0     = 7'h18,
    ADDR_X_MAX_CTRL       = 7'h1c,
    ADDR_KP_DATA_0        = 7'h20,
    ADDR_KP_CTRL          = 7'h24,
    ADDR_KI2_DATA_0       = 7'h28,
    ADDR_KI2_CTRL         = 7'h2c,
    ADDR_YVMEASDBG_DATA_0 = 7'h30,
    ADDR_YVMEASDBG_CTRL   = 7'h34,
    ADDR_YDBG_DATA_0      = 7'h38,
    ADDR_YDBG_CTRL        = 7'h3c,
    ADDR_EDBG_DATA_0      = 7'h40,
    ADDR_EDBG_CTRL        = 7'h44,
    ADDR_UDBG_DATA_0      = 7'h48,
    ADDR_UDBG_CTRL        = 7'h4c,
    WRIDLE                = 2'd0,
    WRDATA                = 2'd1,
    WRRESP                = 2'd2,
    RDIDLE                = 2'd0,
    RDDATA                = 2'd1,
    ADDR_BITS         = 7;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg  [31:0]                   int_v_ref;
    reg  [9:0]                    int_X_MAX;
    reg  [31:0]                   int_Kp;
    reg  [31:0]                   int_Ki2;
    reg  [31:0]                   int_yVmeasDbg;
    reg                           int_yVmeasDbg_ap_vld;
    reg  [31:0]                   int_yDbg;
    reg                           int_yDbg_ap_vld;
    reg  [31:0]                   int_eDbg;
    reg                           int_eDbg_ap_vld;
    reg  [9:0]                    int_uDbg;
    reg                           int_uDbg_ap_vld;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_V_REF_DATA_0: begin
                    rdata <= int_v_ref[31:0];
                end
                ADDR_X_MAX_DATA_0: begin
                    rdata <= int_X_MAX[9:0];
                end
                ADDR_KP_DATA_0: begin
                    rdata <= int_Kp[31:0];
                end
                ADDR_KI2_DATA_0: begin
                    rdata <= int_Ki2[31:0];
                end
                ADDR_YVMEASDBG_DATA_0: begin
                    rdata <= int_yVmeasDbg[31:0];
                end
                ADDR_YVMEASDBG_CTRL: begin
                    rdata[0] <= int_yVmeasDbg_ap_vld;
                end
                ADDR_YDBG_DATA_0: begin
                    rdata <= int_yDbg[31:0];
                end
                ADDR_YDBG_CTRL: begin
                    rdata[0] <= int_yDbg_ap_vld;
                end
                ADDR_EDBG_DATA_0: begin
                    rdata <= int_eDbg[31:0];
                end
                ADDR_EDBG_CTRL: begin
                    rdata[0] <= int_eDbg_ap_vld;
                end
                ADDR_UDBG_DATA_0: begin
                    rdata <= int_uDbg[9:0];
                end
                ADDR_UDBG_CTRL: begin
                    rdata[0] <= int_uDbg_ap_vld;
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign v_ref = int_v_ref;
assign X_MAX = int_X_MAX;
assign Kp    = int_Kp;
assign Ki2   = int_Ki2;
// int_v_ref[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_v_ref[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_V_REF_DATA_0)
            int_v_ref[31:0] <= (WDATA[31:0] & wmask) | (int_v_ref[31:0] & ~wmask);
    end
end

// int_X_MAX[9:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_X_MAX[9:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_X_MAX_DATA_0)
            int_X_MAX[9:0] <= (WDATA[31:0] & wmask) | (int_X_MAX[9:0] & ~wmask);
    end
end

// int_Kp[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_Kp[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KP_DATA_0)
            int_Kp[31:0] <= (WDATA[31:0] & wmask) | (int_Kp[31:0] & ~wmask);
    end
end

// int_Ki2[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_Ki2[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KI2_DATA_0)
            int_Ki2[31:0] <= (WDATA[31:0] & wmask) | (int_Ki2[31:0] & ~wmask);
    end
end

// int_yVmeasDbg
always @(posedge ACLK) begin
    if (ARESET)
        int_yVmeasDbg <= 0;
    else if (ACLK_EN) begin
        if (yVmeasDbg_ap_vld)
            int_yVmeasDbg <= yVmeasDbg;
    end
end

// int_yVmeasDbg_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_yVmeasDbg_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (yVmeasDbg_ap_vld)
            int_yVmeasDbg_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_YVMEASDBG_CTRL)
            int_yVmeasDbg_ap_vld <= 1'b0; // clear on read
    end
end

// int_yDbg
always @(posedge ACLK) begin
    if (ARESET)
        int_yDbg <= 0;
    else if (ACLK_EN) begin
        if (yDbg_ap_vld)
            int_yDbg <= yDbg;
    end
end

// int_yDbg_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_yDbg_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (yDbg_ap_vld)
            int_yDbg_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_YDBG_CTRL)
            int_yDbg_ap_vld <= 1'b0; // clear on read
    end
end

// int_eDbg
always @(posedge ACLK) begin
    if (ARESET)
        int_eDbg <= 0;
    else if (ACLK_EN) begin
        if (eDbg_ap_vld)
            int_eDbg <= eDbg;
    end
end

// int_eDbg_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_eDbg_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (eDbg_ap_vld)
            int_eDbg_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_EDBG_CTRL)
            int_eDbg_ap_vld <= 1'b0; // clear on read
    end
end

// int_uDbg
always @(posedge ACLK) begin
    if (ARESET)
        int_uDbg <= 0;
    else if (ACLK_EN) begin
        if (uDbg_ap_vld)
            int_uDbg <= uDbg;
    end
end

// int_uDbg_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_uDbg_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (uDbg_ap_vld)
            int_uDbg_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_UDBG_CTRL)
            int_uDbg_ap_vld <= 1'b0; // clear on read
    end
end


//------------------------Memory logic-------------------

endmodule
