-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Dig_compensator is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_meas : IN STD_LOGIC_VECTOR (11 downto 0);
    u : OUT STD_LOGIC_VECTOR (9 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of Dig_compensator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Dig_compensator,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.159000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=1834,HLS_SYN_LUT=3175}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_53 : BOOLEAN;
    signal params_vRef : STD_LOGIC_VECTOR (31 downto 0);
    signal params_coef_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal params_coef_ce0 : STD_LOGIC;
    signal params_coef_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_y_max : STD_LOGIC_VECTOR (31 downto 0);
    signal params_adcMask : STD_LOGIC_VECTOR (31 downto 0);
    signal u_1_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal u_1_vld_reg : STD_LOGIC := '0';
    signal u_1_vld_in : STD_LOGIC;
    signal u_1_ack_in : STD_LOGIC;
    signal yVmeasDbg_ap_vld : STD_LOGIC;
    signal yDbg_ap_vld : STD_LOGIC;
    signal eDbg_ap_vld : STD_LOGIC;
    signal uDbg_ap_vld : STD_LOGIC;
    signal e_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal e_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_149 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_156 : BOOLEAN;
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_166 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_173 : BOOLEAN;
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_183 : BOOLEAN;
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_191 : BOOLEAN;
    signal params_y_max_read_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal params_vRef_read_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_258_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_reg_651 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_cast_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_210 : BOOLEAN;
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_measReal_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_219 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_228 : BOOLEAN;
    signal e_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_239 : BOOLEAN;
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_252 : BOOLEAN;
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_263 : BOOLEAN;
    signal tmp_9_fu_339_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_272 : BOOLEAN;
    signal tmp_s_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_282 : BOOLEAN;
    signal x_assign_fu_429_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_291 : BOOLEAN;
    signal tmp_26_fu_546_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_reg_739 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_fu_564_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_302 : BOOLEAN;
    signal tmp_12_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_320 : BOOLEAN;
    signal e_load_2_phi_fu_576_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cond1_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_load_1_phi_fu_609_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_load_s_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_load_s_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_358 : BOOLEAN;
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_365 : BOOLEAN;
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_262_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_to_int_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_301_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_311_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_to_int_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_to_int_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_350_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_360_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_367_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_377_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_448_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_s_fu_452_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast1_fu_464_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_468_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_fu_482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_474_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_cast_fu_488_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_492_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_504_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_fu_460_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_6_i_i_fu_508_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_7_i_i_fu_512_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_518_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_24_fu_532_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_536_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal cond_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_219_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_236_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component Dig_compensator_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dig_compensator_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dig_compensator_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Dig_compensator_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Dig_compensator_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        params_vRef : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_coef_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        params_coef_ce0 : IN STD_LOGIC;
        params_coef_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_y_max : OUT STD_LOGIC_VECTOR (31 downto 0);
        params_adcMask : OUT STD_LOGIC_VECTOR (31 downto 0);
        yVmeasDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        yVmeasDbg_ap_vld : IN STD_LOGIC;
        yDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        yDbg_ap_vld : IN STD_LOGIC;
        eDbg : IN STD_LOGIC_VECTOR (31 downto 0);
        eDbg_ap_vld : IN STD_LOGIC;
        uDbg : IN STD_LOGIC_VECTOR (9 downto 0);
        uDbg_ap_vld : IN STD_LOGIC );
    end component;



begin
    Dig_compensator_AXILiteS_s_axi_U : component Dig_compensator_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        params_vRef => params_vRef,
        params_coef_address0 => params_coef_address0,
        params_coef_ce0 => params_coef_ce0,
        params_coef_q0 => params_coef_q0,
        params_y_max => params_y_max,
        params_adcMask => params_adcMask,
        yVmeasDbg => v_measReal_reg_661,
        yVmeasDbg_ap_vld => yVmeasDbg_ap_vld,
        yDbg => x_assign_reg_733,
        yDbg_ap_vld => yDbg_ap_vld,
        eDbg => e_reg_672,
        eDbg_ap_vld => eDbg_ap_vld,
        uDbg => tmp_26_reg_739,
        uDbg_ap_vld => uDbg_ap_vld);

    Dig_compensator_faddfsub_32ns_32ns_32_5_full_dsp_U0 : component Dig_compensator_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        opcode => grp_fu_219_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    Dig_compensator_fmul_32ns_32ns_32_4_max_dsp_U1 : component Dig_compensator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_223_p0,
        din1 => grp_fu_223_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    Dig_compensator_fmul_32ns_32ns_32_4_max_dsp_U2 : component Dig_compensator_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => params_coef_q0,
        din1 => e_1,
        ce => ap_const_logic_1,
        dout => grp_fu_227_p2);

    Dig_compensator_sitofp_32ns_32_6_U3 : component Dig_compensator_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_233_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p1);

    Dig_compensator_fcmp_32ns_32ns_1_1_U4 : component Dig_compensator_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_236_p0,
        din1 => grp_fu_236_p1,
        opcode => grp_fu_236_opcode,
        dout => grp_fu_236_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    e_load_s_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and (tmp_12_fu_555_p2 = ap_const_lv1_0) and not((u_1_ack_in = ap_const_logic_0)) and not((ap_const_lv1_0 = cond1_fu_583_p2)))) then 
                e_load_s_fu_110 <= e_load_2_phi_fu_576_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                e_load_s_fu_110 <= e_1;
            end if; 
        end if;
    end process;

    i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and (tmp_12_fu_555_p2 = ap_const_lv1_0) and not((u_1_ack_in = ap_const_logic_0)))) then 
                i_reg_208 <= i_1_fu_564_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
                i_reg_208 <= ap_const_lv2_2;
            end if; 
        end if;
    end process;

    u_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    y_load_s_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and (tmp_12_fu_555_p2 = ap_const_lv1_0) and not((u_1_ack_in = ap_const_logic_0)) and not((ap_const_lv1_0 = cond1_fu_583_p2)))) then 
                y_load_s_fu_114 <= y_load_1_phi_fu_609_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
                y_load_s_fu_114 <= y_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and (tmp_12_fu_555_p2 = ap_const_lv1_0) and not((u_1_ack_in = ap_const_logic_0)) and not((ap_const_lv1_0 = cond1_fu_583_p2)))) then
                e_1 <= e_load_2_phi_fu_576_p3;
                y_1 <= y_load_1_phi_fu_609_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and (tmp_12_fu_555_p2 = ap_const_lv1_0) and not((u_1_ack_in = ap_const_logic_0)) and (ap_const_lv1_0 = cond1_fu_583_p2))) then
                e_2 <= e_load_2_phi_fu_576_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                e_reg_672 <= grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                params_vRef_read_reg_646 <= params_vRef;
                params_y_max_read_reg_641 <= params_y_max;
                tmp_8_reg_651 <= tmp_8_fu_258_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then
                reg_241 <= params_coef_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then
                reg_246 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then
                reg_252 <= grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then
                tmp_22_reg_728 <= tmp_22_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then
                tmp_26_reg_739 <= tmp_26_fu_546_p3;
                x_assign_reg_733 <= x_assign_fu_429_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                tmp_3_reg_694 <= grp_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                tmp_9_reg_714 <= tmp_9_fu_339_p3;
                tmp_s_reg_721 <= grp_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) and (ap_const_logic_1 = u_1_vld_in) and (ap_const_logic_0 = u_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) and (ap_const_logic_1 = u_1_vld_in) and (ap_const_logic_1 = u_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                u_1_data_reg <= tmp_26_fu_546_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                v_measReal_reg_661 <= grp_fu_233_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, u_1_ack_in, tmp_12_fu_555_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                if ((not((tmp_12_fu_555_p2 = ap_const_lv1_0)) and not((u_1_ack_in = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((tmp_12_fu_555_p2 = ap_const_lv1_0) and not((u_1_ack_in = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(u_1_ack_in, ap_sig_cseq_ST_st36_fsm_35, tmp_12_fu_555_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not((tmp_12_fu_555_p2 = ap_const_lv1_0)) and not((u_1_ack_in = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(u_1_ack_in, ap_sig_cseq_ST_st36_fsm_35, tmp_12_fu_555_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not((tmp_12_fu_555_p2 = ap_const_lv1_0)) and not((u_1_ack_in = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_149 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_156 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_166 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_173 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_183 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_191_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_191 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_210 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_219_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_219 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_228 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_239_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_239 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_252_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_252 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_263_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_263 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_272_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_272 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_282 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    ap_sig_291_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_291 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    ap_sig_302_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_302 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    ap_sig_320_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_320 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    ap_sig_358_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_358 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_365_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_365 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_53_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_53 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_228)
    begin
        if (ap_sig_228) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_149)
    begin
        if (ap_sig_149) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_239)
    begin
        if (ap_sig_239) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_166)
    begin
        if (ap_sig_166) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_252)
    begin
        if (ap_sig_252) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_156)
    begin
        if (ap_sig_156) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_53)
    begin
        if (ap_sig_53) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_173)
    begin
        if (ap_sig_173) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_365)
    begin
        if (ap_sig_365) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_183)
    begin
        if (ap_sig_183) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_263)
    begin
        if (ap_sig_263) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_210)
    begin
        if (ap_sig_210) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_191)
    begin
        if (ap_sig_191) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_272)
    begin
        if (ap_sig_272) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_282)
    begin
        if (ap_sig_282) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_291)
    begin
        if (ap_sig_291) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_320)
    begin
        if (ap_sig_320) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_302)
    begin
        if (ap_sig_302) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_219)
    begin
        if (ap_sig_219) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_358)
    begin
        if (ap_sig_358) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    cond1_fu_583_p2 <= "1" when (i_reg_208 = ap_const_lv2_1) else "0";
    cond_fu_570_p2 <= "1" when (i_1_fu_564_p2 = ap_const_lv2_0) else "0";

    eDbg_ap_vld_assign_proc : process(u_1_ack_in, ap_sig_cseq_ST_st36_fsm_35, tmp_12_fu_555_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not((tmp_12_fu_555_p2 = ap_const_lv1_0)) and not((u_1_ack_in = ap_const_logic_0)))) then 
            eDbg_ap_vld <= ap_const_logic_1;
        else 
            eDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    e_load_2_phi_fu_576_p3 <= 
        e_reg_672 when (cond_fu_570_p2(0) = '1') else 
        e_load_s_fu_110;

    grp_fu_219_opcode_assign_proc : process(ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_219_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            grp_fu_219_opcode <= ap_const_lv2_0;
        else 
            grp_fu_219_opcode <= "XX";
        end if; 
    end process;


    grp_fu_219_p0_assign_proc : process(reg_246, reg_252, params_vRef_read_reg_646, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            grp_fu_219_p0 <= reg_252;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_219_p0 <= reg_246;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_219_p0 <= params_vRef_read_reg_646;
        else 
            grp_fu_219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_219_p1_assign_proc : process(y_1, reg_246, v_measReal_reg_661, tmp_3_reg_694, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_219_p1 <= y_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            grp_fu_219_p1 <= reg_246;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_219_p1 <= tmp_3_reg_694;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_219_p1 <= v_measReal_reg_661;
        else 
            grp_fu_219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_223_p0_assign_proc : process(params_coef_q0, reg_241, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_223_p0 <= params_coef_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_223_p0 <= reg_241;
        else 
            grp_fu_223_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_223_p1_assign_proc : process(e_2, ap_sig_cseq_ST_st18_fsm_17, e_reg_672, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_223_p1 <= e_2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_223_p1 <= e_reg_672;
        else 
            grp_fu_223_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_p0_assign_proc : process(params_y_max_read_reg_641, tmp_1_cast_fu_267_p1, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st27_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            grp_fu_233_p0 <= params_y_max_read_reg_641;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_fu_233_p0 <= tmp_1_cast_fu_267_p1;
        else 
            grp_fu_233_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_236_opcode_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_236_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            grp_fu_236_opcode <= ap_const_lv5_2;
        else 
            grp_fu_236_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_236_p0_assign_proc : process(reg_252, tmp_9_reg_714, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_236_p0 <= tmp_9_reg_714;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            grp_fu_236_p0 <= reg_252;
        else 
            grp_fu_236_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_236_p1_assign_proc : process(ap_sig_cseq_ST_st32_fsm_31, tmp_s_reg_721, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            grp_fu_236_p1 <= tmp_s_reg_721;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            grp_fu_236_p1 <= ap_const_lv32_0;
        else 
            grp_fu_236_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_564_p2 <= std_logic_vector(unsigned(i_reg_208) + unsigned(ap_const_lv2_3));
    isNeg_fu_474_p3 <= sh_assign_fu_468_p2(8 downto 8);
    loc_V_1_fu_448_p1 <= p_Val2_s_fu_434_p1(23 - 1 downto 0);
    loc_V_fu_438_p4 <= p_Val2_s_fu_434_p1(30 downto 23);
    notlhs2_fu_381_p2 <= "0" when (tmp_14_fu_350_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_399_p2 <= "0" when (tmp_16_fu_367_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_315_p2 <= "0" when (tmp_fu_301_p4 = ap_const_lv8_FF) else "1";
    notrhs3_fu_387_p2 <= "1" when (tmp_17_fu_360_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_405_p2 <= "1" when (tmp_23_fu_377_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_321_p2 <= "1" when (tmp_15_fu_311_p1 = ap_const_lv23_0) else "0";
    p_Result_s_fu_452_p3 <= (ap_const_lv1_1 & loc_V_1_fu_448_p1);
    p_Val2_s_fu_434_p1 <= x_assign_fu_429_p3;

    params_coef_address0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            params_coef_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            params_coef_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            params_coef_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            params_coef_address0 <= "XX";
        end if; 
    end process;


    params_coef_ce0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            params_coef_ce0 <= ap_const_logic_1;
        else 
            params_coef_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sh_assign_1_cast_cast_fu_504_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_492_p3),24));

        sh_assign_1_cast_fu_500_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_492_p3),32));

    sh_assign_1_fu_492_p3 <= 
        tmp_4_i_i_cast_fu_488_p1 when (isNeg_fu_474_p3(0) = '1') else 
        sh_assign_fu_468_p2;
    sh_assign_fu_468_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast1_fu_464_p1));
    tmp_10_fu_327_p2 <= (notrhs_fu_321_p2 or notlhs_fu_315_p2);
    tmp_10_to_int_fu_364_p1 <= tmp_s_reg_721;
    tmp_12_fu_555_p2 <= "1" when (i_reg_208 = ap_const_lv2_0) else "0";
    tmp_13_fu_333_p2 <= (tmp_10_fu_327_p2 and grp_fu_236_p2);
    tmp_14_fu_350_p4 <= tmp_9_to_int_fu_347_p1(30 downto 23);
    tmp_15_fu_311_p1 <= tmp_7_to_int_fu_297_p1(23 - 1 downto 0);
    tmp_16_fu_367_p4 <= tmp_10_to_int_fu_364_p1(30 downto 23);
    tmp_17_fu_360_p1 <= tmp_9_to_int_fu_347_p1(23 - 1 downto 0);
    tmp_18_fu_393_p2 <= (notrhs3_fu_387_p2 or notlhs2_fu_381_p2);
    tmp_19_fu_411_p2 <= (notrhs5_fu_405_p2 or notlhs4_fu_399_p2);
    tmp_1_cast_fu_267_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_262_p2),32));
    tmp_1_fu_262_p2 <= (tmp_8_reg_651 and v_meas);
    tmp_20_fu_417_p2 <= (tmp_18_fu_393_p2 and tmp_19_fu_411_p2);
    tmp_22_fu_423_p2 <= (tmp_20_fu_417_p2 and grp_fu_236_p2);
    tmp_23_fu_377_p1 <= tmp_10_to_int_fu_364_p1(23 - 1 downto 0);
    tmp_24_fu_532_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_524_p3),10));
    tmp_25_fu_536_p4 <= tmp_9_i_i_fu_518_p2(32 downto 23);
    tmp_26_fu_546_p3 <= 
        tmp_24_fu_532_p1 when (isNeg_fu_474_p3(0) = '1') else 
        tmp_25_fu_536_p4;
    tmp_29_fu_524_p3 <= tmp_7_i_i_fu_512_p2(23 downto 23);
    tmp_2_i_i_fu_460_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_452_p3),62));
        tmp_4_i_i_cast_fu_488_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_fu_482_p2),9));

    tmp_4_i_i_fu_482_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_438_p4));
    tmp_6_i_i_fu_508_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_500_p1),62));
    tmp_7_i_i_fu_512_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_452_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_504_p1(24-1 downto 0)))));
    tmp_7_to_int_fu_297_p1 <= reg_252;
    tmp_8_fu_258_p1 <= params_adcMask(12 - 1 downto 0);
    tmp_9_fu_339_p3 <= 
        reg_252 when (tmp_13_fu_333_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_9_i_i_fu_518_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_fu_460_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_508_p1(31-1 downto 0)))));
    tmp_9_to_int_fu_347_p1 <= tmp_9_reg_714;
    tmp_fu_301_p4 <= tmp_7_to_int_fu_297_p1(30 downto 23);
    tmp_i_i_i_cast1_fu_464_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_438_p4),9));
    u <= u_1_data_reg;

    uDbg_ap_vld_assign_proc : process(u_1_ack_in, ap_sig_cseq_ST_st36_fsm_35, tmp_12_fu_555_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not((tmp_12_fu_555_p2 = ap_const_lv1_0)) and not((u_1_ack_in = ap_const_logic_0)))) then 
            uDbg_ap_vld <= ap_const_logic_1;
        else 
            uDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    u_1_ack_in_assign_proc : process(u_1_vld_reg)
    begin
        if (((ap_const_logic_0 = u_1_vld_reg) or ((ap_const_logic_1 = u_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            u_1_ack_in <= ap_const_logic_1;
        else 
            u_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    u_1_vld_in_assign_proc : process(ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            u_1_vld_in <= ap_const_logic_1;
        else 
            u_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    x_assign_fu_429_p3 <= 
        tmp_9_reg_714 when (tmp_22_reg_728(0) = '1') else 
        tmp_s_reg_721;

    yDbg_ap_vld_assign_proc : process(u_1_ack_in, ap_sig_cseq_ST_st36_fsm_35, tmp_12_fu_555_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not((tmp_12_fu_555_p2 = ap_const_lv1_0)) and not((u_1_ack_in = ap_const_logic_0)))) then 
            yDbg_ap_vld <= ap_const_logic_1;
        else 
            yDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    yVmeasDbg_ap_vld_assign_proc : process(u_1_ack_in, ap_sig_cseq_ST_st36_fsm_35, tmp_12_fu_555_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not((tmp_12_fu_555_p2 = ap_const_lv1_0)) and not((u_1_ack_in = ap_const_logic_0)))) then 
            yVmeasDbg_ap_vld <= ap_const_logic_1;
        else 
            yVmeasDbg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    y_load_1_phi_fu_609_p3 <= 
        x_assign_reg_733 when (cond_fu_570_p2(0) = '1') else 
        y_load_s_fu_114;
end behav;
